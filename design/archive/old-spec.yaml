openapi: 3.0.3
info:
  title: Point of Service (POS) API
  version: "1.0"
  description: "REST API to be used to create tableside food ordering applications."
  contact:
    email: mawentowski@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Orders
    description: Operations related to managing orders, including creation, modification, and status updates
  - name: Dishes
    description: Operations for managing dishes, including adding, updating, and deleting dishes
  - name: Ingredients
    description: Operations for managing ingredients used in dishes, including adding, updating, and deleting ingredients
  - name: Menus
    description: Operations for managing menus, which organize dishes into categories or sections
  - name: Categories
    description: Operations for categorizing dishes in menus, allowing for easy navigation and organization
  - name: Users
    description: Operations for managing user accounts, including registration, profile management, and authentication
  - name: Auth
    description: Operations for user authentication, including login, token refresh, and logout
paths:
  /orders:
    post:
      summary: Create an order
      operationId: postOrder
      description: |
        This operation can be used to create an order when a patron places an order via a mobile app, tablet app, self-service kiosk, etc., depending on the API consumer's use case.
      tags:
        - Orders
      responses:
        "201":
          description: |
            Resource created successfully. The response body contains the newly created resource.

            The server logic applies to the response body as follows:

            - The default `priority` is `3` out of `5`, indicating medium priority. Restaurant staff may adjust the priority based on factors like preparation time.
            - The `status` is set to `received` for an order placed immedilatey, or `scheduled` when the `scheduled_at` field was set to a date-time in the future in the request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
          headers:
            Location:
              schema:
                type: string
              description: Points to the resource endpoint for the newly created resource
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        description: |
          Request body containing details of the order. Each dish ID should correspond to a dish in the database. Set the value of `scheduled_at` to `null` to place the order immediately.
        required: true
        content:
          application/json:
            schema:
              properties:
                given_name:
                  type: string
                  pattern: "^[^\\s]*$"
                  example: "John"
                  description: The first name of the patron that placed the order. Cannot contain spaces.
                table_number:
                  type: integer
                  example: 8
                  nullable: true
                  description: |
                    The table number tells the staff where in the the patron is located. Set the value to `null` for a takeaway order.
                scheduled_at:
                  type: string
                  format: date-time
                  description: The timestamp indicating when the order is scheduled for.
                  nullable: true
                  example: null
                dish_ids:
                  type: array
                  items:
                    type: string
                  example:
                    - "692a4a34a46ecf001f35ac6f"
                    - "6a4a857c022eb7001f9b8972"
                    - "6b7c2441a0db43001f9bf377"
                  description: Contains the unique identifiers of dishes to add to the order.
              required:
                - given_name
                - table_number
                - dish_ids
    get:
      summary: Get a list of orders
      description: This operation retrieves a list of orders based on specified query parameters. It is commonly used to view the `status` and `priority` of orders on the current day or view historical orders for inventory and analytics purposes. Supports both page-based pagination and cursor-based pagination.
      operationId: getOrderList
      tags:
        - Orders
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          schema:
            type: string
          example: "priority:asc"
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "table_number,status,priority"
        - name: select
          in: query
          description: |
            Selection filters to display only resources that match the provided criteria. Enter the field name, followed by `=`, then:

            - prefix the field value with `lt:` for *less than* or `lt:` for *less than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
            - prefix the field value with `eq:` to express equivalence. It is the default value when no prefix is provided. Supports fields of the following data types: integers, numbers, and strings.
            - prefix the field value with `gt:` for *greater than* or `gt:` for *greater than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
          schema:
            type: string
            example: "created_at=gte:2024-04-23T00:00:00.000,table_number=8"
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied. If a value for `limit` is set and an `offset` value is not, cursor-based pagination is applied.
          schema:
            type: integer
            maximum: 30
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                  total_results:
                    type: integer
                    example: 20
                  cursor:
                    type: integer
                    example: 5
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /orders/{order_id}/dishes:
    get:
      summary: Retrieve dishes for an order
      description: |
        This operation retrieves a list of dishes belonging to a specific order. Each dish object returned contains detailed information about the dish and which ingredients are essential to preparing the dish.
      operationId: getOrderDishes
      tags:
        - Orders
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bcb"
          description: The unique identifier for the resource.
        - name: include
          in: query
          schema:
            type: string
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          example: "name,description,price"
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Dish"
                  total_results:
                    type: integer
                    example: 1
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /orders/{order_id}:
    get:
      summary: Get an order's details
      description: |
        This operation retrieves detailed information about a specific order identified by its unique order ID.
      operationId: getOrder
      tags:
        - Orders
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bcc"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          schema:
            type: string
          example: table_number,status,priority
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              # creating an order creates a Patron
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update an order
      description: |
        This operation updates an existing order with the provided data. You can modify the order's status, priority, and the list of dishes associated with it.
      operationId: putOrder
      tags:
        - Orders
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bcd"
          description: The unique identifier for the resource.
      requestBody:
        description: Request body containing properties to update the order.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: "#/components/schemas/Status"
                priority:
                  $ref: "#/components/schemas/Priority"
                dish_ids:
                  type: array
                  items:
                    type: string
                  example:
                    - "5fb3d21df15a6a415082a399"
                    - "60c5fe768f23023ab2f2f888"
                    - "612d63dc4bb92b001e313725"
                  description: Contains the unique identifiers of dishes to associate with the order.
      responses:
        "200":
          description: Successful operation. The response body contains the updated resource.
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      summary: Delete an order
      description: |
        This operation deletes an existing order identified by its unique order ID.
      operationId: deleteOrder
      tags:
        - Orders
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bca"
          description: The unique identifier for the resource.
      responses:
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /dishes:
    post:
      summary: Create a dish
      operationId: postDishes
      description: |
        This operation creates a new dish with the provided information. The `dish_id` returned in the response can be used to associate the dish with an order.

        Each `ingredient_id` should refer to an ingredient currently in the system. For each ingredient, set the value of `is_essential` to `true` if the ingredient is required to prepare the dish. It's considered a best practice to ensure that each essential ingredient has a positive quantity. This helps determine if the dish should be selectable in the user interface.
      tags:
        - Dishes
      requestBody:
        description: Request body containing information used to create the dish
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dish"
      responses:
        "201":
          description: Resource created successfully. The response body contains the newly created resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
          headers:
            Location:
              schema:
                type: string
              description: Points to the resource endpoint for the newly created resource
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    get:
      summary: Get a list of dishes
      description: |
        This operation retrieves a list of dishes based on the specified criteria. You can sort the results, include specific properties, select dishes that match certain criteria, and paginate through the results.
      operationId: getDishList
      tags:
        - Dishes
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          schema:
            type: string
          example: "name:asc"
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          schema:
            type: string
          example: "name,price,station,ingredients"
        - name: select
          in: query
          description: |
            Selection filters to display only resources that match the provided criteria. Enter the field name, followed by `=`, then:

            - prefix the field value with `lt:` for *less than* or `lt:` for *less than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
            - prefix the field value with `eq:` to express equivalence. It is the default value when no prefix is provided. Supports fields of the following data types: integers, numbers, and strings.
            - prefix the field value with `gt:` for *greater than* or `gt:` for *greater than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.

          schema:
            type: string
            example: "price=lt:9.99"
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied. If a value for `limit` is set and an `offset` value is not, cursor-based pagination is applied.
          schema:
            type: integer
            maximum: 30
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Dish"
                  total_results:
                    type: integer
                    example: 20
                    description: The number of resources returned in the response.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /dishes/{dish_id}:
    get:
      summary: Get a dish's details
      description: |
        Retrieve detailed information about a specific dish identified by its unique dish ID.
      operationId: getDish
      tags:
        - Dishes
      parameters:
        - name: dish_id
          in: path
          schema:
            type: string
          required: true
          example: "66294b2a4475a41f3e709bd1"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          schema:
            type: string
          example: name,description,price
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update a dish
      operationId: putDish
      description: |
        This operation updates an existing dish with the provided data.
      tags:
        - Dishes
      parameters:
        - name: dish_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bce"
          description: The unique identifier for the resource.
      requestBody:
        description: Request body containing properties to update the dish.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dish"
      responses:
        "200":
          description: Successful operation. The response body contains the updated resource.
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      summary: Delete a dish
      description: This operation deletes an existing dish identified by its unique dish ID.
      operationId: deleteDish
      tags:
        - Dishes
      parameters:
        - name: dish_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bd0"
          description: The unique identifier for the resource.
      responses:
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /dishes/{dish_id}/ingredients:
    get:
      summary: Get a dish's ingredients
      description: This operation retrieves a list of ingredients belonging to a specific dish. Importantly, the `in_stock_qty` for a dish indicates how much of the ingredient is available.
      operationId: getDishIngredients
      tags:
        - Dishes
      parameters:
        - name: dish_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bd2"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          schema:
            type: string
          example: "name,in_stock_qty"
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ingredient"
                  total_results:
                    type: integer
                    example: 1
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /ingredients:
    post:
      summary: Create an ingredient
      description: |
        This operation creates a new ingredient with the provided information. Set an initial quantity of the ingredient using the `in_stock_qty` field.
            
        The `ingredient_id` returned in the response can be used to associate the ingredient with a dish. The `in_stock_qty` can be used to track if the ingredient has a positive quantity.
      operationId: postIngredient
      tags:
        - Ingredients
      responses:
        "201":
          description: |
            Resource created successfully. The response body contains the newly created resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
          headers:
            Location:
              schema:
                type: string
              description: Points to the resource endpoint for the newly created resource
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredient"
    get:
      summary: Get a list of ingredients
      description: This operation retrieves a list of ingredients based on the specified criteria. You can sort the results, include specific properties, select ingredients that match certain criteria, and paginate through the results.
      tags:
        - Ingredients
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          schema:
            type: string
          example: "in_stock_qty:asc"
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          schema:
            type: string
          example: "name,in_stock_qty"
        - name: select
          in: query
          description: |
            Selection filters to display only resources that match the provided criteria. Enter the field name, followed by `=`, then:

            - prefix the field value with `lt:` for *less than* or `lt:` for *less than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
            - prefix the field value with `eq:` to express equivalence. It is the default value when no prefix is provided. Supports fields of the following data types: integers, numbers, and strings.
            - prefix the field value with `gt:` for *greater than* or `gt:` for *greater than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.

          schema:
            type: string
            example: "in_stock_qty=eq:0"
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied. If a value for `limit` is set and an `offset` value is not, cursor-based pagination is applied.
          schema:
            type: integer
            maximum: 30
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ingredient"
                  total_results:
                    type: integer
                    example: 1
                  cursor:
                    type: integer
                    example: 5
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /ingredients/{ingredient_id}:
    get:
      summary: Get an ingredient's details
      description: This operation retrieves information about a specific ingredient identified by its unique ingredient ID.
      operationId: getIngredient
      tags:
        - Ingredients
      parameters:
        - name: ingredient_id
          in: path
          schema:
            type: string
          required: true
          example: "614d706b67c122001f35cc47"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "in_stock_qty"
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update an ingredient
      description: This operation updates an ingredient using the provided information. Using this operation, API consumers can update the `in_stock_qty` of ingredients when orders are placed.
      operationId: putIngredient
      tags:
        - Ingredients
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: string
          example: "617d2e09ec42e0001f41bf84"
          description: The unique identifier for the resource.
      requestBody:
        description: Request body containing properties to update the ingredient.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredient"
      responses:
        "200":
          description: Successful operation. The response body contains the updated resource.
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      summary: Delete an ingredient
      description: This operation deletes an existing order identified by its unique order ID.
      operationId: deleteIngredient
      tags:
        - Ingredients
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: string
          example: "61c8c34bb02368001f8f0812"
          description: The unique identifier for the resource.
      responses:
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /menus:
    post:
      summary: Create a menu
      description: This operation creates a new menu with the provided information.
      operationId: postMenu
      tags:
        - Menus
      responses:
        "201":
          description: Resource created successfully. The response body contains the newly created resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
          headers:
            Location:
              schema:
                type: string
              description: Points to the resource endpoint for the newly created resource
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        description: Request body containing menu details. Each category ID should correspond to a category in the database.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Menu"
    get:
      summary: Get a list of menus
      description: This operation retrieves a list of menus based on the specified criteria.
      operationId: getMenuList
      tags:
        - Menus
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          schema:
            type: string
          example: "priority:asc"
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "table_number,status,priority"
        - name: select
          in: query
          description: |
            Selection filters to display only resources that match the provided criteria. Enter the field name, followed by `=`, then:

            - prefix the field value with `lt:` for *less than* or `lt:` for *less than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
            - prefix the field value with `eq:` to express equivalence. It is the default value when no prefix is provided. Supports fields of the following data types: integers, numbers, and strings.
            - prefix the field value with `gt:` for *greater than* or `gt:` for *greater than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
          schema:
            type: string
            example: "created_at=gte:2024-04-23T00:00:00.000,table_number=8"
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied. If a value for `limit` is set and an `offset` value is not, cursor-based pagination is applied.
          schema:
            type: integer
            maximum: 30
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Menu"
                  total_results:
                    type: integer
                    example: 1
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /menus/{menu_id}:
    get:
      summary: View a menu
      description: This operation retrieves information about a menu identified by its unique menu ID.
      operationId: getMenu
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          required: true
          schema:
            type: string
          example: "6220a6a8d01d24001f27d3ff"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "name,category_ids"
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update a menu
      description: This operation updates an existing menu with the provided data.
      operationId: putMenu
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          required: true
          schema:
            type: string
          example: "62a26aa41c7c5c001f627a4f"
          description: The unique identifier for the resource.
      requestBody:
        description: Request body containing properties to update the menu.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Menu"
      responses:
        "200":
          description: Successful operation. The response body contains the updated resource.
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      summary: Delete a menu
      description: This operation deletes an existing menu identified by its unique menu ID.
      operationId: deleteMenu
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          required: true
          schema:
            type: string
          example: "6261c0e33e5cf4f29b4641c4"
          description: The unique identifier for the resource.
      responses:
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /menus/{menu_id}/categories:
    get:
      summary: View a menu's categories
      description: This operation retrieves a list of categories belonging to a specific menu.
      operationId: getMenuCategories
      tags:
        - Menus
      parameters:
        - name: menu_id
          in: path
          required: true
          schema:
            type: string
          example: "62f7c50e47410a001f512d4d"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "name,dish_ids"
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
                  total_results:
                    type: integer
                    example: 1
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /categories:
    post:
      summary: Create a category
      description: |
        This operation creates a new category with the provided information. Categories can be used to organize/group dishes in food ordering apps. For example, displaying tabs for each category. 

        The `category_id` returned in the response can be used to associate the category with a menu.
      operationId: postCategory
      tags:
        - Categories
      responses:
        "201":
          description: |
            Resource created successfully. The response body contains the newly created resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
          headers:
            Location:
              schema:
                type: string
              description: Points to the resource endpoint for the newly created resource
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
    get:
      summary: Get a list of categories
      description: This operation retrieves a list of categories based on the specified criteria.
      operationId: getCategoryList
      tags:
        - Categories
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          schema:
            type: string
          example: "priority:asc"
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "table_number,status,priority"
        - name: select
          in: query
          description: |
            Selection filters to display only resources that match the provided criteria. Enter the field name, followed by `=`, then:

            - prefix the field value with `lt:` for *less than* or `lt:` for *less than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
            - prefix the field value with `eq:` to express equivalence. It is the default value when no prefix is provided. Supports fields of the following data types: integers, numbers, and strings.
            - prefix the field value with `gt:` for *greater than* or `gt:` for *greater than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
          schema:
            type: string
            example: "created_at=gte:2024-04-23T00:00:00.000,table_number=8"
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied. If a value for `limit` is set and an `offset` value is not, cursor-based pagination is applied.
          schema:
            type: integer
            maximum: 30
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
                  total_results:
                    type: integer
                    example: 1

        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /categories/{category_id}:
    get:
      summary: Get a category's details
      description: This operation retrieves information about a category identified by its unique category ID.
      operationId: getCategory
      tags:
        - Categories
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
          example: "632a14b6d004f3001f12c8c8"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "name,dish_ids"
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update a category
      description: This operation updates an existing category with the provided data.
      operationId: putCategory
      tags:
        - Categories
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
          example: "643e8ef8b5a1e8001f7ecb16"
          description: The unique identifier for the resource.
      responses:
        "200":
          description: Successful operation. The response body contains the updated resource.
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
    delete:
      summary: Delete a category
      description: This operation deletes an existing category identified by its unique category ID.
      operationId: deleteCategory
      tags:
        - Categories
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
          example: "63c896f844697e001f1a19c0"
          description: The unique identifier for the resource.
      responses:
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /categories/{category_id}/dishes:
    get:
      summary: View a category's dishes
      description: This operation retrieves a list of dishes belonging to a specific category. Each dish object returned contains detailed information about the dish and which ingredients are essential to preparing the dish.
      operationId: getCategoryDishes
      tags:
        - Categories
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
          example: "65bf24fc1f1b5c001f1d99fd"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Dish"
                  total_results:
                    type: integer
                    example: 1

        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users:
    post:
      summary: Create a user account
      description: This operation creates a new user with the provided information. The API server uses `role` to determine the the access rights of the user. The `email` field is used for password reset.
      operationId: postUser
      tags:
        - Users
      responses:
        "201":
          description: Resource created successfully. The response body contains the newly created resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            Location:
              schema:
                type: string
              description: Points to the resource endpoint for the newly created resource
        "400":
          description: Bad request. The request was malformed or invalid.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      security: []
    get:
      summary: Get a list of users
      description: This operation retrieves a list of users based on the specified criteria.
      operationId: getAllUsers
      tags:
        - Users
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          schema:
            type: string
          example: "priority:asc"
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "table_number,status,priority"
        - name: select
          in: query
          description: |
            Selection filters to display only resources that match the provided criteria. Enter the field name, followed by `=`, then:

            - prefix the field value with `lt:` for *less than* or `lt:` for *less than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
            - prefix the field value with `eq:` to express equivalence. It is the default value when no prefix is provided. Supports fields of the following data types: integers, numbers, and strings.
            - prefix the field value with `gt:` for *greater than* or `gt:` for *greater than* or *equal to*. Supports fields of the following data types: integers, numbers, and date-time strings.
          schema:
            type: string
            example: "created_at=gte:2024-04-23T00:00:00.000,table_number=8"
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied. If a value for `limit` is set and an `offset` value is not, cursor-based pagination is applied.
          schema:
            type: integer
            maximum: 30
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total_results:
                    type: integer
                    example: 20
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /users/{user_id}:
    get:
      summary: Get a user's details
      description: This operation retrieves information about a user identified by its unique user ID.
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bc9"
          description: The unique identifier for the resource.
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema. Supports bracket notation to access nested properties.
          schema:
            type: string
          example: "user_name,role,email"
      responses:
        "200":
          description: Successful operation. The response body contains the requested data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update a user
      description: This operation updates an existing user with the provided data.
      operationId: putUser
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bc9"
          description: The unique identifier for the resource.
      requestBody:
        description: Request body containing properties to update the user.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation. The response body contains the updated resource.
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      summary: Delete a user
      description: This operation deletes an existing user identified by its unique user ID.
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          example: "66294b2a4475a41f3e709bca"
          description: The unique identifier for the resource.
      responses:
        "204":
          description: No content. The operation was successful, and there is no content to return.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /auth/login:
    post:
      summary: Authenticate user and obtain a JWT token
      description: This operation allows users, or API consumers on behalf of users, to authenticate and obtain a JWT (JSON Web Token) to access protected resources. When sending API requests, the API consumer passes the JWT in the Authorization header of their API requests. The `role` and the `user_id` passed in the request are encoded into the JWT. The API server determines which resources the user can access based on the JWT.
      operationId: postAuthLogin
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        description: Request body containing the details to encode in the JWT token.
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: "#/components/schemas/Role"
                user_id:
                  type: string
                  example: "66294b2a4475a41f3e709bc8"
                  description: The unique identifier for the resource.
              required:
                - role
                - user_id
      responses:
        "201":
          description: Resource created successfully. The response body contains the newly created resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtTokenResponse"
          headers:
            Location:
              schema:
                type: string
              description: Points to the resource endpoint for the newly created resource
        "400":
          description: Bad request. The request was malformed or invalid.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /auth/refresh-token:
    post:
      summary: Refresh JWT token
      description: This operation refreshes a JWT token, providing a new access token to the user without requiring reauthentication. The response also includes a new refresh token.
      operationId: postAuthRefreshToken
      tags:
        - Auth
      requestBody:
        description: Request body containing the refresh token used to refresh the access token.
        content:
          application/json:
            schema:
              properties:
                refresh_token:
                  type: string
                  description: "The refresh token used to obtain a new access token."
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE2NDYxNzg2MjIsInJvbGVzIjpbInVzZXIiLCJhZG1pbiJdfQ.KwSUg-DiKoBiGQpCAwY2fVqGBwrEwvKcXQtHOdcBFWo"
              required:
                - refresh_token
        required: true
      responses:
        "201":
          description: Resource created successfully. The response body contains the newly created resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtTokenResponse"
          headers:
            Location:
              schema:
                type: string
              description: Points to the resource endpoint for the newly created resource
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /auth/logout:
    post:
      summary: Logout and invalidate token
      description: This operation logs out the user and invalidates the current JWT token, preventing further access to protected resources using the current token.
      operationId: postAuthLogout
      tags:
        - Auth
      requestBody:
        description: Request body containing the JWT token to invalidate.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: "The JWT token to invalidate."
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE2NDYxNzg2MjIsInJvbGVzIjpbInVzZXIiLCJhZG1pbiJdfQ.KwSUg-DiKoBiGQpCAwY2fVqGBwrEwvKcXQtHOdcBFWo"
              required:
                - access_token
      responses:
        "200":
          description: Token invalidated successfully.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /auth/reset-password:
    post:
      summary: Reset a user's password
      description: This operation allows a user to reset their password by sending a password reset email to their registered email address.
      operationId: postAuthResetPassword
      tags:
        - Auth
      requestBody:
        description: Request body containing user's email address for password reset.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: "The email address of the user."
                  example: "johndoe@gmail.com"
              required:
                - email
      responses:
        "200":
          description: Password reset email sent successfully.
        "400":
          description: Bad request. The request was malformed or invalid.
        "401":
          description: Unauthorized. Authentication is required, or the provided credentials are invalid.
        "403":
          description: Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.
        "404":
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: The request could not be completed due to a conflict with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal server error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  schemas:
    Order:
      type: object
      properties:
        order_id:
          type: string
          example: "674d0bf5c28b69001f8e03a1"
          readOnly: true
          description: The unique identifier for the resource.
        created_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the order was created in ISO 8601 format.
        updated_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the order was created in ISO 8601 format.
        given_name:
          type: string
          pattern: "^[^\\s]*$"
          example: "John"
          description: The first name of the patron that placed the order. Cannot contain spaces.
        table_number:
          type: integer
          example: 8
          nullable: true
          description: |
            The table number tells the staff where in the the patron is located. Set the value to `null` for a takeaway order.
        scheduled_at:
          type: string
          format: date-time
          description: The timestamp indicating when the order is scheduled for.
          nullable: true
          example: "2024-04-23T18:00:00Z"
        status:
          $ref: "#/components/schemas/Status"
        priority:
          $ref: "#/components/schemas/Priority"
        dish_ids:
          type: array
          items:
            type: string
          example:
            - "692a4a34a46ecf001f35ac6f"
            - "6a4a857c022eb7001f9b8972"
            - "6b7c2441a0db43001f9bf377"
          description: Contains the unique identifiers of dishes to add to the order.
    Menu:
      type: object
      properties:
        menu_id:
          type: string
          readOnly: true
          example: "66294b2a4475a41f3e709bbb"
          description: The unique identifier for the resource.
        created_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the order was created in ISO 8601 format.
        updated_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the menu was created in ISO 8601 format. Initially set to the value of the `created_at` field.
        name:
          type: string
          description: A human-friendly name for the menu.
          example: "Dinner"
        category_ids:
          type: array
          items:
            type: string
          example:
            - "66294b2a4475a41f3e709bbc"
            - "66294b2a4475a41f3e709bbd"
            - "66294b2a4475a41f3e709bbe"
          description: Contains the unique identifiers of categories to add to the menu.
      required:
        - name
        - category_ids
    Category:
      type: object
      properties:
        category_id:
          type: string
          readOnly: true
          example: "66294b2a4475a41f3e709bbf"
          description: The unique identifier for the resource.
        created_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: date-time the order was created in ISO 8601 format.
        updated_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the category was created in ISO 8601 format. Initially set to the value of the `created_at` field.
        name:
          type: string
          example: "Main course"
          description: A human-friendly name for the category.
        dish_ids:
          type: array
          items:
            type: string
          example:
            - "66294b2a4475a41f3e709bc0"
            - "66294b2a4475a41f3e709bc1"
            - "66294b2a4475a41f3e709bc2"
          description: Contains the unique identifiers of dishes to add to a category.
      required:
        - name
        - dish_ids
    Dish:
      type: object
      properties:
        dish_id:
          type: string
          example: "66294b2a4475a41f3e709bc3"
          readOnly: true
          description: The unique identifier for the resource.
        created_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the order was created in ISO 8601 format.
        updated_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the dish was created in ISO 8601 format. Initially set to the value of the `created_at` field.
        name:
          type: string
          example: "Burger"
          description: A human-friendly name for the dish.
        description:
          type: string
          example: A description of the dish commonly displayed in a user interface.
        price:
          type: number
          format: float
          example: 9.99
          description: The cost of the dish.
        image_name:
          type: string
          description: |
            API consumers can use this string to generate the asset URL for displaying the dish image in user interfaces.
          example: "burger.jpg"
        station:
          $ref: "#/components/schemas/Station"
        ingredients:
          type: array
          description: List of ingredients used during the preparation of the dish.
          items:
            type: object
            properties:
              ingredient_id:
                type: string
                example: "66294b2a4475a41f3e709bc4"
                description: The unique identifier for the resource.
              is_essential:
                type: boolean
                description: |
                  Whether the ingredient is essential to prepare the dish.
                example: true
          example:
            - ingredient_id: "66294b2a4475a41f3e709bc5"
              is_essential: true
            - ingredient_id: "66294b2a4475a41f3e709bc6"
              is_essential: true
            - ingredient_id: "66294b2a4475a41f3e709bc7"
              is_essential: false
      required:
        - name
        - description
        - price
        - image_name
        - station
        - ingredients
    Ingredient:
      type: object
      properties:
        ingredient_id:
          type: string
          readOnly: true
          example: "66294b2a4475a41f3e709bc8"
          description: The unique identifier for the resource.
        created_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: date-time the order was created in ISO 8601 format.
        updated_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the ingredient was created in ISO 8601 format. Initially set to the value of the `created_at` field.
        name:
          type: string
          description: A human-friendly name for the ingredient.
          example: "tomato"
        in_stock_qty:
          type: integer
          description: The quantity of the ingredient in the restaurant's inventory. The quantity of the ingredient should be managed by the API consumer.
          example: 3
      required:
        - name
        - in_stock_qty
    User:
      type: object
      properties:
        user_name:
          type: string
          description: The user name of the user for login purposes.
          example: "john_doe"
        password:
          type: string
          description: A password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character (@, $, !, %, *, ?, &).
          example: "P@ssw0rd!"
        email:
          type: string
          format: email
          description: The email address of the user that can be used for password resets.
          example: "johndoe@gmail.com"
        role:
          $ref: "#/components/schemas/Role"
        user_id:
          type: string
          readOnly: true
          example: "66294b2a4475a41f3e709bc8"
          description: The unique identifier for the resource.
        created_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the order was created in ISO 8601 format.
        updated_at:
          type: string
          format: date-time
          example: "2024-04-22T10:00:00Z"
          readOnly: true
          description: Date-time the user was created in ISO 8601 format. Initially set to the value of the `created_at` field.
      required:
        - user_name
        - password
        - email
        - role
    Status:
      type: string
      nullable: true
      enum:
        [
          "received",
          "in_progress",
          "completed",
          "on_the_way",
          "delivered",
          "cancelled",
          "scheduled",
        ]
      example: "received"
      description: The status of the order changed by restaurant staff as the order progresses toward completion.
    Priority:
      type: integer
      minimum: 0
      maximum: 5
      default: 3
      description: Order priority from `1` to `5` (i.e., greatest to least priority). Priority is normally adjusted by kitchen staff.
    Station:
      type: string
      description: |
        The restaurant kitchen has 3 stations where food is prepared:
          - cold: This area is responsible for preparing cold appetizers, salads, and desserts that don't require cooking.
          - hot: Also known as the "hot line" or "hot side," this area handles dishes that require cooking over heat, such as sautéing, frying, grilling, and baking.
          - beverages: In addition to coffee bars, there may be stations dedicated to preparing other beverages such as cocktails, smoothies, or fresh juices.
      enum: ["cold", "hot", "beverages"]
      example: "hot"
    Role:
      type: string
      enum: ["patron", "expeditor", "chef", "manager"]
      example: manager
      description: The role that determines a user's access rights to resources.
    JwtTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Used to access protected resources on behalf of the user. Normally has a relatively short lifespan and needs to be refreshed periodically.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE2NDYxNzg2MjIsInJvbGVzIjpbInVzZXIiLCJhZG1pbiJdfQ.KwSUg-DiKoBiGQpCAwY2fVqGBwrEwvKcXQtHOdcBFWo
        expires_in:
          type: integer
          description: The duration in seconds for which the access token is valid.
          example: 3600
        refresh_token:
          type: string
          description: Used to obtain a new access token when the current one expires. It has a longer lifespan compared to access tokens.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE2NDYxNzg2MjIsInJvbGVzIjpbInVzZXIiLCJhZG1pbiJdfQ.KwSUg-DiKoBiGQpCAwY2fVqGBwrEwvKcXQtHOdcBFWo
    OASError:
      type: object
      properties:
        message:
          type: string
          description: Human-readable error message
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: |
                  For input validation errors, identifies where
                  in the JSON request body the error occurred.
              message:
                type: string
                description: Human-readable error message.
              errorCode:
                type: string
                description: Code indicating error type.
    Problem:
      type: object
      properties:
        type:
          type: string
          description: URI indicating error type.
        title:
          type: string
          description: Human-readable error title.
        detail:
          type: string
          description: Human-readable error details.
        instance:
          type: string
          description: URI indicating error instance.
      required:
        - type
        - title
        - detail
  securitySchemes:
    JwtToken:
      type: http
      scheme: bearer
security:
  - JwtToken: []
