{
	"info": {
		"_postman_id": "4175b67c-278c-4b3f-927c-64df74c9f675",
		"name": "Point of Service (POS) API - Original",
		"description": "REST API to be used to create tableside food ordering applications.\n\nContact Support:\n Name: Course Discord server\n Email: mark.wentowski@docsgeek.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8472983",
		"_collection_link": "https://dark-firefly-574621.postman.co/workspace/Docs-Geek---API-documentation-c~b994ffc5-846a-4e34-ad0c-b001a2c8c5c6/collection/8472983-4175b67c-278c-4b3f-927c-64df74c9f675?action=share&source=collection_link&creator=8472983"
	},
	"item": [
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Benjamin\",\n  \"table_number\": 18,\n  \"dish_ids\": [\n    \"{{dishId}}\"\n  ],\n  \"special_requests\": \"No peanuts\",\n  \"scheduled at\": null\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "This operation can be used to create an order when a patron places an order via a mobile app, tablet app, self-service kiosk, etc., depending on the API consumer's use case.\n"
					},
					"response": [
						{
							"name": "Order - Unscheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"John\",\n  \"table_number\": 8,\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"special_requests\": \"ad exercitation\",\n  \"priority\": 3,\n  \"scheduled_at\": null,\n  \"status\": \"Received\"\n}"
						},
						{
							"name": "Order - Scheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18,\n  \"scheduled_at\": \"2024-08-26T09:03:18.865Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"John\",\n  \"table_number\": 8,\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"special_requests\": \"ad exercitation\",\n  \"priority\": 3,\n  \"scheduled_at\": null,\n  \"status\": \"Received\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order - Unscheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Scheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18,\n  \"scheduled_at\": \"2024-08-26T09:03:18.865Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Unscheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Scheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18,\n  \"scheduled_at\": \"2024-08-26T09:03:18.865Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Unscheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Scheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"Ben\",\n  \"table_number\": 18,\n  \"scheduled_at\": \"2024-08-26T09:03:18.865Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of orders",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sort",
									"value": "priority",
									"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n",
									"disabled": true
								},
								{
									"key": "order",
									"value": "asc",
									"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "table_number|status|priority",
									"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "table_number.lt~5|status.eq~On the Way",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Pagination filter for the maximum number of results to return in the response.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of orders based on specified query parameters. It is commonly used to view the `status` and `priority` of orders on the current day or view historical orders for inventory and analytics purposes."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority&order=asc&fields=table_number|status|priority&filter=table_number.lt~5|status.eq~On the way&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "table_number.lt~5|status.eq~On the way",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"John\",\n      \"table_number\": 8,\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"special_requests\": \"dolor \",\n      \"priority\": 3,\n      \"scheduled_at\": null,\n      \"status\": \"Received\"\n    },\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"John\",\n      \"table_number\": 8,\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"special_requests\": \"cupidatat pariatur magna\",\n      \"priority\": 3,\n      \"scheduled_at\": null,\n      \"status\": \"Received\"\n    }\n  ],\n  \"total_results\": 20\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority&order=asc&fields=table_number|status|priority&filter=table_number.lt~5|status.eq~On the way&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "table_number.lt~5|status.eq~On the way",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority&order=asc&fields=table_number|status|priority&filter=table_number.lt~5|status.eq~On the way&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "table_number.lt~5|status.eq~On the way",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority&order=asc&fields=table_number|status|priority&filter=table_number.lt~5|status.eq~On the way&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "table_number.lt~5|status.eq~On the way",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority&order=asc&fields=table_number|status|priority&filter=table_number.lt~5|status.eq~On the way&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "table_number.lt~5|status.eq~On the way",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get an order's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":id"
							],
							"query": [
								{
									"key": "fields",
									"value": "table_number|status|priority",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "66e687592c8d2c7a6031c3ef",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves detailed information about a specific order identified by its unique order ID.\n"
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id?fields=table_number|status|priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"John\",\n  \"table_number\": 8,\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"special_requests\": \"ad exercitation\",\n  \"priority\": 3,\n  \"scheduled_at\": null,\n  \"status\": \"Received\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:id?fields=table_number|status|priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:id?fields=table_number|status|priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:id?fields=table_number|status|priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id?fields=table_number|status|priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id?fields=table_number|status|priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "table_number|status|priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Ben\",\n  \"table_number\": 18,\n  \"status\": \"received\",\n  \"priority\": 3,\n  \"dish_ids\": [\n    \"66e687592c8d2c7a6031c34e\",\n    \"66e687592c8d2c7a6031c355\",\n    \"66e687592c8d2c7a6031c35a\"\n  ],\n  \"special_requests\": \"No peanuts\",\n  \"scheduled_at\": null\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "66e69c076a791f0ee8a0a9b6",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an existing order with the provided data. You can modify the order's status, priority, and the list of dishes associated with it.\n"
					},
					"response": [
						{
							"name": "Resource updated successfully. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"Received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"John\",\n      \"table_number\": 8,\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"special_requests\": \"consequat veniam sit aliquip\",\n      \"priority\": 3,\n      \"scheduled_at\": null,\n      \"status\": \"Received\"\n    },\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"John\",\n      \"table_number\": 8,\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"special_requests\": \"pariatur ipsum non\",\n      \"priority\": 3,\n      \"scheduled_at\": null,\n      \"status\": \"Received\"\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"Received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"Received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"Received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"Received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"Received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"Received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"Received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "66e69c076a791f0ee8a0a9b6",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing order identified by its unique order ID.\n"
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Retrieve dishes for an order",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:id/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":id",
								"dishes"
							],
							"query": [
								{
									"key": "sort",
									"value": "station",
									"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n",
									"disabled": true
								},
								{
									"key": "order",
									"value": "asc",
									"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order.  If you include an `order` value, you must include a `sort` value.\n",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name|station|ingredients",
									"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "created_at.gt~2024-05-07|station.eq~hot",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Pagination filter for the maximum number of results to return in the response.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "66e69c076a791f0ee8a0a9b6",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves a list of dishes belonging to a specific order. Each dish object returned contains detailed information about the dish and which ingredients are essential to preparing the dish.\n"
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id/dishes?sort=station&order=asc&fields=name|station|ingredients&filter=created_at.gt~2024-05-07|station.eq~hot&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id",
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "station",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order.  If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|station|ingredients",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|station.eq~hot",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"Risotto alla Milanese\",\n      \"description\": \"A description of the resource.\",\n      \"category\": \"Main Course\",\n      \"image_name\": \"burger\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"preparation_time\": 999,\n      \"price\": 999,\n      \"station\": \"hot\"\n    },\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"Risotto alla Milanese\",\n      \"description\": \"A description of the resource.\",\n      \"category\": \"Main Course\",\n      \"image_name\": \"burger\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"preparation_time\": 999,\n      \"price\": 999,\n      \"station\": \"hot\"\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:id/dishes?sort=station&order=asc&fields=name|station|ingredients&filter=created_at.gt~2024-05-07|station.eq~hot&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id",
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "station",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order.  If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|station|ingredients",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|station.eq~hot",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:id/dishes?sort=station&order=asc&fields=name|station|ingredients&filter=created_at.gt~2024-05-07|station.eq~hot&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id",
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "station",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order.  If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|station|ingredients",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|station.eq~hot",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:id/dishes?sort=station&order=asc&fields=name|station|ingredients&filter=created_at.gt~2024-05-07|station.eq~hot&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id",
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "station",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order.  If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|station|ingredients",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|station.eq~hot",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id/dishes?sort=station&order=asc&fields=name|station|ingredients&filter=created_at.gt~2024-05-07|station.eq~hot&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id",
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "station",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order.  If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|station|ingredients",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|station.eq~hot",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:id/dishes?sort=station&order=asc&fields=name|station|ingredients&filter=created_at.gt~2024-05-07|station.eq~hot&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":id",
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "station",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order.  If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|station|ingredients",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|station.eq~hot",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations related to managing orders, including creation, modification, and status updates"
		},
		{
			"name": "Dishes",
			"item": [
				{
					"name": "Create a dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is 201",
									"if (pm.response.code === 201) {",
									"    // Parse the JSON response",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Log the response for debugging",
									"    console.log(\"Response JSON:\", responseJson);",
									"    ",
									"    // Extract the access_token and refresh_token",
									"    var dishId = responseJson.id;",
									"",
									"    // Save the tokens to environment variables",
									"    pm.environment.set(\"dishId\", dishId);",
									"",
									"    // Log success message",
									"    console.log(\"Dish details saved successfully.\");",
									"} else {",
									"    // Log failure message",
									"    console.log(\"Response code is not 200.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Ratatouille\",\n  \"description\": \"A traditional French vegetable stew from Provence made with eggplant, zucchini, bell peppers, tomatoes, onions, and garlic, all simmered together with olive oil and herbs like thyme and basil.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"ratatouille\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"{{ingredientId}}\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes"
							]
						},
						"description": "This operation creates a new dish with the provided information. The `id` returned in the response can be used to associate the dish with an order.\n\nEach `ingredient_id` should refer to an ingredient currently in the system. For each ingredient, set the value of `is_essential` to `true` if the ingredient is required to prepare the dish. It's considered a best practice to ensure that each essential ingredient has a positive quantity. This helps determine if the dish should be selectable in the user interface.\n"
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"Main Course\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"name\": \"Risotto alla Milanese\",\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource.",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 999,\n  \"price\": 999,\n  \"station\": \"hot\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"Main Course\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"name\": \"Risotto alla Milanese\",\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"Main Course\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"name\": \"Risotto alla Milanese\",\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"Main Course\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"name\": \"Risotto alla Milanese\",\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"Main Course\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"name\": \"Risotto alla Milanese\",\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"Main Course\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"name\": \"Risotto alla Milanese\",\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"Main Course\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"name\": \"Risotto alla Milanese\",\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of dishes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes"
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. For example, if you want to sort the results by priority, you would use `priority` as the value for this parameter. If you include a `sort` value, you must include a `order` value.\n",
									"disabled": true
								},
								{
									"key": "order",
									"value": "desc",
									"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name|ingredients|station",
									"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "created_at.gt~2024-05-07|price.lte~19.99",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Pagination filter for the maximum number of results to return in the response.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of dishes based on the specified criteria. You can sort the results, include specific properties, select dishes that match certain criteria, and paginate through the results.\n"
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name&order=asc&fields=name|ingredients|station&filter=created_at.gt~2024-05-07|price.lte~19.99&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. For example, if you want to sort the results by priority, you would use `priority` as the value for this parameter. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|ingredients|station",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|price.lte~19.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"Risotto alla Milanese\",\n      \"description\": \"A description of the resource.\",\n      \"category\": \"Main Course\",\n      \"image_name\": \"burger\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"preparation_time\": 999,\n      \"price\": 999,\n      \"station\": \"hot\"\n    },\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"Risotto alla Milanese\",\n      \"description\": \"A description of the resource.\",\n      \"category\": \"Main Course\",\n      \"image_name\": \"burger\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"preparation_time\": 999,\n      \"price\": 999,\n      \"station\": \"hot\"\n    }\n  ],\n  \"total_results\": 20\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name&order=asc&fields=name|ingredients|station&filter=created_at.gt~2024-05-07|price.lte~19.99&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. For example, if you want to sort the results by priority, you would use `priority` as the value for this parameter. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|ingredients|station",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|price.lte~19.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name&order=asc&fields=name|ingredients|station&filter=created_at.gt~2024-05-07|price.lte~19.99&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. For example, if you want to sort the results by priority, you would use `priority` as the value for this parameter. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|ingredients|station",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|price.lte~19.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name&order=asc&fields=name|ingredients|station&filter=created_at.gt~2024-05-07|price.lte~19.99&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. For example, if you want to sort the results by priority, you would use `priority` as the value for this parameter. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|ingredients|station",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|price.lte~19.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name&order=asc&fields=name|ingredients|station&filter=created_at.gt~2024-05-07|price.lte~19.99&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. For example, if you want to sort the results by priority, you would use `priority` as the value for this parameter. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|ingredients|station",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|price.lte~19.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a dish's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dishes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes",
								":id"
							],
							"query": [
								{
									"key": "fields",
									"value": "name|price|station|ingredients",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{dishId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "Retrieve detailed information about a specific dish identified by its unique dish ID.\n"
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id?fields=name|price|station|ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "name|price|station|ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 999,\n  \"price\": 999,\n  \"station\": \"hot\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id?fields=name|price|station|ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "name|price|station|ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id?fields=name|price|station|ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "name|price|station|ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id?fields=name|price|station|ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "name|price|station|ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id?fields=name|price|station|ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "name|price|station|ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id?fields=name|price|station|ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "name|price|station|ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update a dish",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Ratatouille\",\n  \"description\": \"A traditional French vegetable stew from Provence made with eggplant, zucchini, bell peppers, tomatoes, onions, and garlic, all simmered together with olive oil and herbs like thyme and basil.\",\n  \"category\": \"Main Course\",\n  \"preparation_time\": 60,\n  \"price\": 2099,\n  \"image_name\": \"ratatouille\",\n  \"station\": \"hot\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"{{ingredientId}}\",\n      \"is_essential\": true\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dishes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{dishId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an existing dish with the provided data.\n"
					},
					"response": [
						{
							"name": "Resource updated successfully. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource.",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 999,\n  \"price\": 999,\n  \"station\": \"hot\"\n}"
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Risotto alla Milanese\",\n  \"description\": \"A description of the resource.\",\n  \"category\": \"Main Course\",\n  \"image_name\": \"burger\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"preparation_time\": 45,\n  \"price\": 999,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete a dish",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dishes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{dishId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing dish identified by its unique dish ID."
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a dish's ingredients",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dishes/:id/ingredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes",
								":id",
								"ingredients"
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n",
									"disabled": true
								},
								{
									"key": "order",
									"value": "asc",
									"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name|in_stock_qty",
									"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "created_at.gt~2024-05-07|in_stock_qty.gt~3",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Pagination filter for the maximum number of results to return in the response.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{dishId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves a list of ingredients belonging to a specific dish. Importantly, the `in_stock_qty` for a dish indicates how much of the ingredient is available."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id/ingredients?sort=name&order=asc&fields=name|in_stocky_qty&filter=created_at.gt:2024-05-07,in_stock_qty.eq~0&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id",
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stocky_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt:2024-05-07,in_stock_qty.eq~0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"Carrot\",\n      \"in_stock_qty\": 3,\n      \"price\": 999\n    },\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"Carrot\",\n      \"in_stock_qty\": 3,\n      \"price\": 999\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id/ingredients?sort=name&order=asc&fields=name|in_stocky_qty&filter=created_at.gt:2024-05-07,in_stock_qty.eq~0&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id",
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stocky_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt:2024-05-07,in_stock_qty.eq~0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id/ingredients?sort=name&order=asc&fields=name|in_stocky_qty&filter=created_at.gt:2024-05-07,in_stock_qty.eq~0&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id",
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stocky_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt:2024-05-07,in_stock_qty.eq~0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id/ingredients?sort=name&order=asc&fields=name|in_stocky_qty&filter=created_at.gt:2024-05-07,in_stock_qty.eq~0&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id",
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stocky_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt:2024-05-07,in_stock_qty.eq~0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id/ingredients?sort=name&order=asc&fields=name|in_stocky_qty&filter=created_at.gt:2024-05-07,in_stock_qty.eq~0&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id",
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stocky_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt:2024-05-07,in_stock_qty.eq~0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:id/ingredients?sort=name&order=asc&fields=name|in_stocky_qty&filter=created_at.gt:2024-05-07,in_stock_qty.eq~0&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":id",
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stocky_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt:2024-05-07,in_stock_qty.eq~0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for managing dishes, including adding, updating, and deleting dishes"
		},
		{
			"name": "Ingredients",
			"item": [
				{
					"name": "Create an ingredient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is 201",
									"if (pm.response.code === 201) {",
									"    // Parse the JSON response",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Log the response for debugging",
									"    console.log(\"Response JSON:\", responseJson);",
									"    ",
									"    // Extract the access_token and refresh_token",
									"    var ingredientId = responseJson.id;",
									"",
									"    // Save the tokens to environment variables",
									"    pm.environment.set(\"ingredientId\", ingredientId);",
									"",
									"    // Log success message",
									"    console.log(\"Ingredient details saved successfully.\");",
									"} else {",
									"    // Log failure message",
									"    console.log(\"Response code is not 200.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ingredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients"
							]
						},
						"description": "This operation creates a new ingredient with the provided information. Set an initial quantity of the ingredient using the `in_stock_qty` field.\n    \nThe `id` returned in the response can be used to associate the ingredient with a dish. The `in_stock_qty` can be used to track if the ingredient has a positive quantity.\n"
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of ingredients",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ingredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients"
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n",
									"disabled": true
								},
								{
									"key": "order",
									"value": "asc",
									"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "name|in_stock_qty",
									"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "created_at.gt~2024-05-07|in_stock_qty.lt~5",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Pagination filter for the maximum number of results to return in the response.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of ingredients based on the specified criteria. You can sort the results, include specific properties, select ingredients that match certain criteria, and paginate through the results."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=name&order=asc&fields=name|in_stock_qty&filter=created_at.gt~2024-05-07|in_stock_qty.lt~5&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stock_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|in_stock_qty.lt~5",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"Carrot\",\n      \"in_stock_qty\": 3,\n      \"price\": 999\n    },\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"Carrot\",\n      \"in_stock_qty\": 3,\n      \"price\": 999\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=name&order=asc&fields=name|in_stock_qty&filter=created_at.gt~2024-05-07|in_stock_qty.lt~5&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stock_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|in_stock_qty.lt~5",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=name&order=asc&fields=name|in_stock_qty&filter=created_at.gt~2024-05-07|in_stock_qty.lt~5&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stock_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|in_stock_qty.lt~5",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=name&order=asc&fields=name|in_stock_qty&filter=created_at.gt~2024-05-07|in_stock_qty.lt~5&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stock_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|in_stock_qty.lt~5",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=name&order=asc&fields=name|in_stock_qty&filter=created_at.gt~2024-05-07|in_stock_qty.lt~5&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "name|in_stock_qty",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|in_stock_qty.lt~5",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get an ingredient's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ingredients/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								":id"
							],
							"query": [
								{
									"key": "fields",
									"value": "in_stock_qty|name",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ingredientId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves information about a specific ingredient identified by its unique ingredient ID."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id?fields=in_stock_qty|name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "in_stock_qty|name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id?fields=in_stock_qty|name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "in_stock_qty|name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id?fields=in_stock_qty|name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "in_stock_qty|name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id?fields=in_stock_qty|name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "in_stock_qty|name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id?fields=in_stock_qty|name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "in_stock_qty|name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id?fields=in_stock_qty|name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "in_stock_qty|name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update an ingredient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 0,\n  \"price\": 999\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ingredients/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ingredientId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an ingredient using the provided information. Using this operation, API consumers can update the `in_stock_qty` of ingredients when orders are placed."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Carrot\",\n  \"in_stock_qty\": 3,\n  \"price\": 999\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete an ingredient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ingredients/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{ingredientId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing order identified by its unique order ID."
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for managing ingredients used in dishes, including adding, updating, and deleting ingredients"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create a user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is 200",
									"if (pm.response.code === 201) {",
									"    // Parse the JSON response",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Log the response for debugging",
									"    console.log(\"Response JSON:\", responseJson);",
									"    ",
									"    // Extract the access_token and refresh_token",
									"    var userName = responseJson.user_name;",
									"    var userPassword = responseJson.password;",
									"    var userId = responseJson.id;",
									"    var userEmail = responseJson.email;",
									"",
									"    // Save the tokens to environment variables",
									"    pm.environment.set(\"userName\", userName);",
									"    pm.environment.set(\"userPassword\", userPassword);",
									"    pm.environment.set(\"userId\", userId);",
									"    pm.environment.set(\"userEmail\", userEmail);",
									"    ",
									"    // Log success message",
									"    console.log(\"User details saved successfully.\");",
									"} else {",
									"    // Log failure message",
									"    console.log(\"Response code is not 200.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"johndosdfse@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doedfs\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This operation creates a new user with the provided information. The API server uses `role` to determine the the access rights of the user. The `email` field is used for password reset."
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"user_name\": \"john_doe\",\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "user_name",
									"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n",
									"disabled": true
								},
								{
									"key": "order",
									"value": "asc",
									"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "user_name|email|role",
									"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "created_at.gt~2024-05-07|user_name.eq~apiuser01",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Pagination filter for the maximum number of results to return in the response.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of users based on the specified criteria."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name&order=asc&fields=user_name|email|role&filter=created_at.gt~2024-05-07|user_name.eq~apiuser01&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "user_name|email|role",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|user_name.eq~apiuser01",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"user_name\": \"john_doe\",\n      \"email\": \"johndoe@gmail.com\",\n      \"password\": \"P@ssw0rd!\",\n      \"role\": \"manager\"\n    },\n    {\n      \"id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"user_name\": \"john_doe\",\n      \"email\": \"johndoe@gmail.com\",\n      \"password\": \"P@ssw0rd!\",\n      \"role\": \"manager\"\n    }\n  ],\n  \"total_results\": 20\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name&order=asc&fields=user_name|email|role&filter=created_at.gt~2024-05-07|user_name.eq~apiuser01&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "user_name|email|role",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|user_name.eq~apiuser01",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name&order=asc&fields=user_name|email|role&filter=created_at.gt~2024-05-07|user_name.eq~apiuser01&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "user_name|email|role",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|user_name.eq~apiuser01",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name&order=asc&fields=user_name|email|role&filter=created_at.gt~2024-05-07|user_name.eq~apiuser01&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "user_name|email|role",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|user_name.eq~apiuser01",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name&order=asc&fields=user_name|email|role&filter=created_at.gt~2024-05-07|user_name.eq~apiuser01&limit=10&offset=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name",
											"description": "Specifies the field by which the results should be sorted. This parameter allows you to define the sorting order based on a particular field in the dataset. If you include a `sort` value, you must include a `order` value.\n"
										},
										{
											"key": "order",
											"value": "asc",
											"description": "Determines the order in which the results should be sorted. This parameter specifies whether the sorting should be in ascending or descending order. Valid values are `asc` for ascending order and `desc` for descending order. If you include an `order` value, you must include a `sort` value.\n"
										},
										{
											"key": "fields",
											"value": "user_name|email|role",
											"description": "Use this parameter to specify which resource properties should be included in the response. Provide a list of schema property names, separated by the `|` delimiter. This allows for precise control over the data returned.\n"
										},
										{
											"key": "filter",
											"value": "created_at.gt~2024-05-07|user_name.eq~apiuser01",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator~value`.\n\n**Basic Equality (eq)**\n- For exact matches, use `fieldName.eq~value`.\n\n**Comparison Operators:**\n- **Less Than (lt)** Use `fieldName.lt~value`.\n- **Less Than or Equal To (lte)** Use `fieldName.lte~value`.\n- **Greater Than (gt):** Use `fieldName.gt~value`.\n- **Greater Than or Equal To (gte):** Use `fieldName.gte~value`.\n\nSeparate filters using the `|` delimter. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response.\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a user's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"query": [
								{
									"key": "fields",
									"value": "user_name|role",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves information about a user identified by its unique user ID."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id?fields=user_name|role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "user_name|role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"user_name\": \"john_doe\",\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id?fields=user_name|role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "user_name|role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id?fields=user_name|role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "user_name|role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id?fields=user_name|role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "user_name|role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id?fields=user_name|role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "user_name|role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id?fields=user_name|role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "fields",
											"value": "user_name|role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update a user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"role\": \"manager\",\n  \"user_name\": \"{{userName}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an existing user with the provided data."
					},
					"response": [
						{
							"name": "Resource updated successfully. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"user_name\": \"john_doe\",\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\"\n}"
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete a user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing user identified by its unique user ID."
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for managing user accounts, including registration, profile management, and authentication"
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Authenticate user and obtain a access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is 200",
									"if (pm.response.code === 201) {",
									"    // Parse the JSON response",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Log the response for debugging",
									"    console.log(\"Response JSON:\", responseJson);",
									"    ",
									"    // Extract the access_token and refresh_token",
									"    var accessToken = responseJson.access_token;",
									"    var refreshToken = responseJson.refresh_token;",
									"    ",
									"    // Save the tokens to environment variables",
									"    pm.environment.set(\"bearerToken\", accessToken);",
									"    pm.environment.set(\"refreshToken\", refreshToken);",
									"    ",
									"    // Log success message",
									"    console.log(\"Access token and refresh token saved successfully.\");",
									"} else {",
									"    // Log failure message",
									"    console.log(\"Response code is not 200. Tokens not saved.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_name\": \"{{userName}}\",\n  \"password\": \"{{userPassword}}\",\n  \"grant_type\": \"password\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token"
							]
						},
						"description": "This operation exchanges the user's username and password directly for an access token. The client ID and client secret are used for client authentication (basic). Certain endpoints require the access token in the Authorization header to perform admin functions like creating menus. If an existing access token is associated with the user, it will be invalidated before a new one is generated."
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"auth_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"access_token\": \"fa0b97b2-445f-41d2-b50f-fb3b014a301e\",\n  \"expires_at\": \"2024-04-22T10:00:00Z\",\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\",\n  \"token_type\": \"Bearer\",\n  \"user_name\": \"john_doe\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Refresh access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is 200",
									"if (pm.response.code === 200) {",
									"    // Parse the JSON response",
									"    var responseJson = pm.response.json();",
									"    ",
									"    // Log the response for debugging",
									"    console.log(\"Response JSON:\", responseJson);",
									"    ",
									"    // Extract the access_token and refresh_token",
									"    var accessToken = responseJson.access_token;",
									"    var refreshToken = responseJson.refresh_token;",
									"    ",
									"    // Save the tokens to environment variables",
									"    pm.environment.set(\"bearerToken\", accessToken);",
									"    pm.environment.set(\"refreshToken\", refreshToken);",
									"    ",
									"    // Log success message",
									"    console.log(\"Access token and refresh token saved successfully.\");",
									"} else {",
									"    // Log failure message",
									"    console.log(\"Response code is not 200. Tokens not saved.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh-token"
							]
						},
						"description": "This operation refreshes a access token using the refresh token, providing a new access token and refresh token to the user without requiring reauthentication."
					},
					"response": [
						{
							"name": "Access token successfully referenced.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "consequat laboris sit velit",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"auth_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"access_token\": \"fa0b97b2-445f-41d2-b50f-fb3b014a301e\",\n  \"expires_at\": \"2024-04-22T10:00:00Z\",\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\",\n  \"token_type\": \"Bearer\",\n  \"user_name\": \"john_doe\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for user authentication, including login, token refresh, and logout"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:80/"
		}
	]
}