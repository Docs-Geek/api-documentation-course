{
	"info": {
		"_postman_id": "cbc42c4f-0849-48b0-8947-e3fb218a7c7e",
		"name": "POS API sample requests",
		"description": "REST API to be used to create tableside food ordering applications.\n\nContact Support:\n Email: mawentowski@gmail.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8472983",
		"_collection_link": "https://dark-firefly-574621.postman.co/workspace/Docs-Geek---API-documentation-c~b994ffc5-846a-4e34-ad0c-b001a2c8c5c6/collection/8472983-cbc42c4f-0849-48b0-8947-e3fb218a7c7e?action=share&source=collection_link&creator=8472983"
	},
	"item": [
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "This operation can be used to create an order when a patron places an order via a mobile app, tablet app, self-service kiosk, etc., depending on the API consumer's use case.\n"
					},
					"response": [
						{
							"name": "Order - Unscheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"John\",\n  \"priority\": 3,\n  \"scheduled_at\": null,\n  \"status\": \"received\",\n  \"table_number\": 8\n}"
						},
						{
							"name": "Order - Scheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18,\n  \"scheduled_at\": \"2024-08-26T09:03:18.865Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"John\",\n  \"priority\": 3,\n  \"scheduled_at\": null,\n  \"status\": \"received\",\n  \"table_number\": 8\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Order - Unscheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Scheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18,\n  \"scheduled_at\": \"2024-08-26T09:03:18.865Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Unscheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Scheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18,\n  \"scheduled_at\": \"2024-08-26T09:03:18.865Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Unscheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Order - Scheduled",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"Ben\",\n  \"table_number\": 18,\n  \"scheduled_at\": \"2024-08-26T09:03:18.865Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of orders",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sort",
									"value": "priority:asc",
									"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n",
									"disabled": true
								},
								{
									"key": "include",
									"value": "table_number,status,priority",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								},
								{
									"key": "select",
									"value": "created_at.gte:2024-05-07,status.eq:in_progress",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of orders based on specified query parameters. It is commonly used to view the `status` and `priority` of orders on the current day or view historical orders for inventory and analytics purposes."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority:asc&include=table_number,status,priority&select=created_at.gte:2024-05-07,status.eq:in_progress&limit=10&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gte:2024-05-07,status.eq:in_progress",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"given_name\": \"John\",\n      \"priority\": 3,\n      \"scheduled_at\": null,\n      \"status\": \"received\",\n      \"table_number\": 8\n    },\n    {\n      \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"given_name\": \"John\",\n      \"priority\": 3,\n      \"scheduled_at\": null,\n      \"status\": \"received\",\n      \"table_number\": 8\n    }\n  ],\n  \"total_results\": 20\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority:asc&include=table_number,status,priority&select=created_at.gte:2024-05-07,status.eq:in_progress&limit=10&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gte:2024-05-07,status.eq:in_progress",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority:asc&include=table_number,status,priority&select=created_at.gte:2024-05-07,status.eq:in_progress&limit=10&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gte:2024-05-07,status.eq:in_progress",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority:asc&include=table_number,status,priority&select=created_at.gte:2024-05-07,status.eq:in_progress&limit=10&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gte:2024-05-07,status.eq:in_progress",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders?sort=priority:asc&include=table_number,status,priority&select=created_at.gte:2024-05-07,status.eq:in_progress&limit=10&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "sort",
											"value": "priority:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gte:2024-05-07,status.eq:in_progress",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get an order's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:order_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":order_id"
							],
							"query": [
								{
									"key": "include",
									"value": "table_number,status,priority",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "order_id",
									"value": "66294b2a4475a41f3e709bcc",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves detailed information about a specific order identified by its unique order ID.\n"
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id?include=table_number,status,priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"query": [
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"given_name\": \"John\",\n  \"priority\": 3,\n  \"scheduled_at\": null,\n  \"status\": \"received\",\n  \"table_number\": 8\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id?include=table_number,status,priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"query": [
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id?include=table_number,status,priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"query": [
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id?include=table_number,status,priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"query": [
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id?include=table_number,status,priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"query": [
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id?include=table_number,status,priority",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"query": [
										{
											"key": "include",
											"value": "table_number,status,priority",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:order_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":order_id"
							],
							"variable": [
								{
									"key": "order_id",
									"value": "66294b2a4475a41f3e709bcd",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an existing order with the provided data. You can modify the order's status, priority, and the list of dishes associated with it.\n"
					},
					"response": [
						{
							"name": "Resource updated successfully. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"given_name\": \"John\",\n      \"priority\": 3,\n      \"scheduled_at\": null,\n      \"status\": \"received\",\n      \"table_number\": 8\n    },\n    {\n      \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"given_name\": \"John\",\n      \"priority\": 3,\n      \"scheduled_at\": null,\n      \"status\": \"received\",\n      \"table_number\": 8\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"priority\": 3,\n  \"status\": \"received\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:order_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":order_id"
							],
							"variable": [
								{
									"key": "order_id",
									"value": "66294b2a4475a41f3e709bca",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing order identified by its unique order ID.\n"
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id"
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Retrieve dishes for an order",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:order_id/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":order_id",
								"dishes"
							],
							"query": [
								{
									"key": "include",
									"value": "name,description,price",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "order_id",
									"value": "66294b2a4475a41f3e709bcb",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves a list of dishes belonging to a specific order. Each dish object returned contains detailed information about the dish and which ingredients are essential to preparing the dish.\n"
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id/dishes?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"description\": \"A description of the resource.\",\n      \"image_name\": \"burger.jpg\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"name\": \"main_course\",\n      \"price\": 9.99,\n      \"station\": \"hot\"\n    },\n    {\n      \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"description\": \"A description of the resource.\",\n      \"image_name\": \"burger.jpg\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"name\": \"main_course\",\n      \"price\": 9.99,\n      \"station\": \"hot\"\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id/dishes?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id/dishes?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id/dishes?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id/dishes?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:order_id/dishes?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":order_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "order_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations related to managing orders, including creation, modification, and status updates"
		},
		{
			"name": "Dishes",
			"item": [
				{
					"name": "Create a dish",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes"
							]
						},
						"description": "This operation creates a new dish with the provided information. The `dish_id` returned in the response can be used to associate the dish with an order.\n\nEach `ingredient_id` should refer to an ingredient currently in the system. For each ingredient, set the value of `is_essential` to `true` if the ingredient is required to prepare the dish. It's considered a best practice to ensure that each essential ingredient has a positive quantity. This helps determine if the dish should be selectable in the user interface.\n"
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource.",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of dishes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes"
							],
							"query": [
								{
									"key": "sort",
									"value": "name:asc",
									"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n",
									"disabled": true
								},
								{
									"key": "include",
									"value": "name,price,station,ingredients",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								},
								{
									"key": "select",
									"value": "price.lt:9.99",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. \n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "5",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of dishes based on the specified criteria. You can sort the results, include specific properties, select dishes that match certain criteria, and paginate through the results.\n"
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name:asc&include=name,price,station,ingredients&select=price.lt:9.99&limit=20&offset=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,price,station,ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "price.lt:9.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. \n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "5",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"description\": \"A description of the resource.\",\n      \"image_name\": \"burger.jpg\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"name\": \"main_course\",\n      \"price\": 9.99,\n      \"station\": \"hot\"\n    },\n    {\n      \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"description\": \"A description of the resource.\",\n      \"image_name\": \"burger.jpg\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"name\": \"main_course\",\n      \"price\": 9.99,\n      \"station\": \"hot\"\n    }\n  ],\n  \"total_results\": 20\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name:asc&include=name,price,station,ingredients&select=price.lt:9.99&limit=20&offset=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,price,station,ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "price.lt:9.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. \n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "5",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name:asc&include=name,price,station,ingredients&select=price.lt:9.99&limit=20&offset=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,price,station,ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "price.lt:9.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. \n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "5",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name:asc&include=name,price,station,ingredients&select=price.lt:9.99&limit=20&offset=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,price,station,ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "price.lt:9.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. \n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "5",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes?sort=name:asc&include=name,price,station,ingredients&select=price.lt:9.99&limit=20&offset=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,price,station,ingredients",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "price.lt:9.99",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. \n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "5",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a dish's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dishes/:dish_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes",
								":dish_id"
							],
							"query": [
								{
									"key": "include",
									"value": "name,description,price",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "dish_id",
									"value": "66294b2a4475a41f3e709bd1",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "Retrieve detailed information about a specific dish identified by its unique dish ID.\n"
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id?include=name,description,price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,description,price",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update a dish",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dishes/:dish_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes",
								":dish_id"
							],
							"variable": [
								{
									"key": "dish_id",
									"value": "66294b2a4475a41f3e709bce",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an existing dish with the provided data.\n"
					},
					"response": [
						{
							"name": "Resource updated successfully. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource.",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}"
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"A description of the resource.\",\n  \"image_name\": \"burger.jpg\",\n  \"ingredients\": [\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    },\n    {\n      \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n      \"is_essential\": true\n    }\n  ],\n  \"name\": \"main_course\",\n  \"price\": 9.99,\n  \"station\": \"hot\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete a dish",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dishes/:dish_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes",
								":dish_id"
							],
							"variable": [
								{
									"key": "dish_id",
									"value": "66294b2a4475a41f3e709bd0",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing dish identified by its unique dish ID."
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id"
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a dish's ingredients",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dishes/:dish_id/ingredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dishes",
								":dish_id",
								"ingredients"
							],
							"query": [
								{
									"key": "include",
									"value": "name,in_stock_qty",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "dish_id",
									"value": "66294b2a4475a41f3e709bd2",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves a list of ingredients belonging to a specific dish. Importantly, the `in_stock_qty` for a dish indicates how much of the ingredient is available."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id/ingredients?include=name,in_stock_qty",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id",
										"ingredients"
									],
									"query": [
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"ingredient_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"main_course\",\n      \"in_stock_qty\": 3\n    },\n    {\n      \"ingredient_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"main_course\",\n      \"in_stock_qty\": 3\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id/ingredients?include=name,in_stock_qty",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id",
										"ingredients"
									],
									"query": [
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id/ingredients?include=name,in_stock_qty",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id",
										"ingredients"
									],
									"query": [
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id/ingredients?include=name,in_stock_qty",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id",
										"ingredients"
									],
									"query": [
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id/ingredients?include=name,in_stock_qty",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id",
										"ingredients"
									],
									"query": [
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dishes/:dish_id/ingredients?include=name,in_stock_qty",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dishes",
										":dish_id",
										"ingredients"
									],
									"query": [
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "dish_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for managing dishes, including adding, updating, and deleting dishes"
		},
		{
			"name": "Ingredients",
			"item": [
				{
					"name": "Create an ingredient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ingredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients"
							]
						},
						"description": "This operation creates a new ingredient with the provided information. Set an initial quantity of the ingredient using the `in_stock_qty` field.\n    \nThe `ingredient_id` returned in the response can be used to associate the ingredient with a dish. The `in_stock_qty` can be used to track if the ingredient has a positive quantity.\n"
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"ingredient_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of ingredients",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ingredients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients"
							],
							"query": [
								{
									"key": "sort",
									"value": "in_stock_qty:asc",
									"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n",
									"disabled": true
								},
								{
									"key": "include",
									"value": "name,in_stock_qty",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								},
								{
									"key": "select",
									"value": "in_stock_qty.eq:0",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of ingredients based on the specified criteria. You can sort the results, include specific properties, select ingredients that match certain criteria, and paginate through the results."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=in_stock_qty:asc&include=name,in_stock_qty&select=in_stock_qty.eq:0&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "in_stock_qty:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "in_stock_qty.eq:0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"ingredient_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"main_course\",\n      \"in_stock_qty\": 3\n    },\n    {\n      \"ingredient_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"name\": \"main_course\",\n      \"in_stock_qty\": 3\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=in_stock_qty:asc&include=name,in_stock_qty&select=in_stock_qty.eq:0&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "in_stock_qty:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "in_stock_qty.eq:0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=in_stock_qty:asc&include=name,in_stock_qty&select=in_stock_qty.eq:0&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "in_stock_qty:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "in_stock_qty.eq:0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=in_stock_qty:asc&include=name,in_stock_qty&select=in_stock_qty.eq:0&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "in_stock_qty:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "in_stock_qty.eq:0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients?sort=in_stock_qty:asc&include=name,in_stock_qty&select=in_stock_qty.eq:0&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients"
									],
									"query": [
										{
											"key": "sort",
											"value": "in_stock_qty:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,in_stock_qty",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "in_stock_qty.eq:0",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get an ingredient's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ingredients/:ingredient_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								":ingredient_id"
							],
							"query": [
								{
									"key": "include",
									"value": "in_stock_qty,name",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "ingredient_id",
									"value": "614d706b67c122001f35cc47",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves information about a specific ingredient identified by its unique ingredient ID."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id?include=in_stock_qty,name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"query": [
										{
											"key": "include",
											"value": "in_stock_qty,name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"ingredient_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id?include=in_stock_qty,name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"query": [
										{
											"key": "include",
											"value": "in_stock_qty,name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id?include=in_stock_qty,name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"query": [
										{
											"key": "include",
											"value": "in_stock_qty,name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id?include=in_stock_qty,name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"query": [
										{
											"key": "include",
											"value": "in_stock_qty,name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id?include=in_stock_qty,name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"query": [
										{
											"key": "include",
											"value": "in_stock_qty,name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id?include=in_stock_qty,name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"query": [
										{
											"key": "include",
											"value": "in_stock_qty,name",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update an ingredient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ingredients/:ingredient_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								":ingredient_id"
							],
							"variable": [
								{
									"key": "ingredient_id",
									"value": "617d2e09ec42e0001f41bf84",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an ingredient using the provided information. Using this operation, API consumers can update the `in_stock_qty` of ingredients when orders are placed."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"in_stock_qty\": 3\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete an ingredient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ingredients/:ingredient_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingredients",
								":ingredient_id"
							],
							"variable": [
								{
									"key": "ingredient_id",
									"value": "61c8c34bb02368001f8f0812",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing order identified by its unique order ID."
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ingredients/:ingredient_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ingredients",
										":ingredient_id"
									],
									"variable": [
										{
											"key": "ingredient_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for managing ingredients used in dishes, including adding, updating, and deleting ingredients"
		},
		{
			"name": "Menus",
			"item": [
				{
					"name": "Create a menu",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"main_course\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/menus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"menus"
							]
						},
						"description": "This operation creates a new menu with the provided information."
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"main_course\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of menus",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/menus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"menus"
							],
							"query": [
								{
									"key": "sort",
									"value": "name:asc",
									"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n",
									"disabled": true
								},
								{
									"key": "include",
									"value": "name,category_ids",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								},
								{
									"key": "select",
									"value": "created_at.gt:2024-04-23,name.eq:dinner",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of menus based on the specified criteria."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus?sort=name:asc&include=name,category_ids&select=created_at.gt:2024-04-23,name.eq:dinner&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:dinner",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"category_ids\": [\n        \"66294b2a4475a41f3e709bbc\",\n        \"66294b2a4475a41f3e709bbd\",\n        \"66294b2a4475a41f3e709bbe\"\n      ],\n      \"name\": \"main_course\"\n    },\n    {\n      \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"category_ids\": [\n        \"66294b2a4475a41f3e709bbc\",\n        \"66294b2a4475a41f3e709bbd\",\n        \"66294b2a4475a41f3e709bbe\"\n      ],\n      \"name\": \"main_course\"\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus?sort=name:asc&include=name,category_ids&select=created_at.gt:2024-04-23,name.eq:dinner&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:dinner",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus?sort=name:asc&include=name,category_ids&select=created_at.gt:2024-04-23,name.eq:dinner&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:dinner",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus?sort=name:asc&include=name,category_ids&select=created_at.gt:2024-04-23,name.eq:dinner&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:dinner",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus?sort=name:asc&include=name,category_ids&select=created_at.gt:2024-04-23,name.eq:dinner&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:dinner",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "View a menu",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/menus/:menu_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"menus",
								":menu_id"
							],
							"query": [
								{
									"key": "include",
									"value": "name,category_ids",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "menu_id",
									"value": "6220a6a8d01d24001f27d3ff",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves information about a menu identified by its unique menu ID."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id?include=name,category_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"order_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id?include=name,category_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id?include=name,category_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id?include=name,category_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id?include=name,category_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id?include=name,category_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,category_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update a menu",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/menus/:menu_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"menus",
								":menu_id"
							],
							"variable": [
								{
									"key": "menu_id",
									"value": "62a26aa41c7c5c001f627a4f",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an existing menu with the provided data."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_ids\": [\n    \"66294b2a4475a41f3e709bbc\",\n    \"66294b2a4475a41f3e709bbd\",\n    \"66294b2a4475a41f3e709bbe\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete a menu",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/menus/:menu_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"menus",
								":menu_id"
							],
							"variable": [
								{
									"key": "menu_id",
									"value": "6261c0e33e5cf4f29b4641c4",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing menu identified by its unique menu ID."
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id"
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "View a menu's categories",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/menus/:menu_id/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"menus",
								":menu_id",
								"categories"
							],
							"query": [
								{
									"key": "include",
									"value": "name,dish_ids",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "menu_id",
									"value": "62f7c50e47410a001f512d4d",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves a list of categories belonging to a specific menu."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id/categories?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id",
										"categories"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"name\": \"main_course\"\n    },\n    {\n      \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"name\": \"main_course\"\n    }\n  ]\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id/categories?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id",
										"categories"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id/categories?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id",
										"categories"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id/categories?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id",
										"categories"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id/categories?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id",
										"categories"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/menus/:menu_id/categories?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"menus",
										":menu_id",
										"categories"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "menu_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for managing menus, which organize dishes into categories or sections"
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Create a category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\",\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "This operation creates a new category with the provided information. Categories can be used to organize/group dishes in food ordering apps. For example, displaying tabs for each category. \n\nThe `category_id` returned in the response can be used to associate the category with a menu.\n"
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\",\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\",\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\",\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\",\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\",\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\",\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\",\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of categories",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "sort",
									"value": "name:asc",
									"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n",
									"disabled": true
								},
								{
									"key": "include",
									"value": "name,dish_ids",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								},
								{
									"key": "select",
									"value": "created_at.gt:2024-04-23,name.eq:main_course",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "10",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n",
									"disabled": true
								}
							]
						},
						"description": "This operation retrieves a list of categories based on the specified criteria."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?sort=name:asc&include=name,dish_ids&select=created_at.gt:2024-04-23,name.eq:main_course&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:main_course",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"name\": \"main_course\"\n    },\n    {\n      \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"dish_ids\": [\n        \"692a4a34a46ecf001f35ac6f\",\n        \"6a4a857c022eb7001f9b8972\",\n        \"6b7c2441a0db43001f9bf377\"\n      ],\n      \"name\": \"main_course\"\n    }\n  ],\n  \"total_results\": 1\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?sort=name:asc&include=name,dish_ids&select=created_at.gt:2024-04-23,name.eq:main_course&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:main_course",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?sort=name:asc&include=name,dish_ids&select=created_at.gt:2024-04-23,name.eq:main_course&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:main_course",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories?sort=name:asc&include=name,dish_ids&select=created_at.gt:2024-04-23,name.eq:main_course&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:main_course",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?sort=name:asc&include=name,dish_ids&select=created_at.gt:2024-04-23,name.eq:main_course&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,name.eq:main_course",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a category's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/:category_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":category_id"
							],
							"query": [
								{
									"key": "include",
									"value": "name,dish_ids",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "category_id",
									"value": "632a14b6d004f3001f12c8c8",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves information about a category identified by its unique category ID."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id?include=name,dish_ids",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"query": [
										{
											"key": "include",
											"value": "name,dish_ids",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update a category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/:category_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":category_id"
							],
							"variable": [
								{
									"key": "category_id",
									"value": "643e8ef8b5a1e8001f7ecb16",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an existing category with the provided data."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"dish_ids\": [\n    \"692a4a34a46ecf001f35ac6f\",\n    \"6a4a857c022eb7001f9b8972\",\n    \"6b7c2441a0db43001f9bf377\"\n  ],\n  \"name\": \"main_course\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete a category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/:category_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":category_id"
							],
							"variable": [
								{
									"key": "category_id",
									"value": "63c896f844697e001f1a19c0",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing category identified by its unique category ID."
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id"
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "View a category's dishes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/:category_id/dishes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":category_id",
								"dishes"
							],
							"query": [
								{
									"key": "include",
									"value": "in pariatur",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "category_id",
									"value": "65bf24fc1f1b5c001f1d99fd",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves a list of dishes belonging to a specific category. Each dish object returned contains detailed information about the dish and which ingredients are essential to preparing the dish."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id/dishes?include=in pariatur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "in pariatur",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"description\": \"A description of the resource.\",\n      \"image_name\": \"burger.jpg\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"name\": \"main_course\",\n      \"price\": 9.99,\n      \"station\": \"hot\"\n    },\n    {\n      \"dish_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"description\": \"A description of the resource.\",\n      \"image_name\": \"burger.jpg\",\n      \"ingredients\": [\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        },\n        {\n          \"ingredient_id\": \"66294b2a4475a41f3e709bc4\",\n          \"is_essential\": true\n        }\n      ],\n      \"name\": \"main_course\",\n      \"price\": 9.99,\n      \"station\": \"hot\"\n    }\n  ]\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id/dishes?include=in pariatur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "in pariatur",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id/dishes?include=in pariatur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "in pariatur",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id/dishes?include=in pariatur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "in pariatur",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id/dishes?include=in pariatur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "in pariatur",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories/:category_id/dishes?include=in pariatur",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":category_id",
										"dishes"
									],
									"query": [
										{
											"key": "include",
											"value": "in pariatur",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "category_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for categorizing dishes in menus, allowing for easy navigation and organization"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create a user account",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This operation creates a new user with the provided information. The API server uses `role` to determine the the access rights of the user. The `email` field is used for password reset."
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"user_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a list of users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?sort=user_name:asc&include=user_name,password&select=created_at.gt:2024-04-23,user_name.eq:john_doe&limit=20&offset=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "user_name:asc",
									"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
								},
								{
									"key": "include",
									"value": "user_name,password",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
								},
								{
									"key": "select",
									"value": "created_at.gt:2024-04-23,user_name.eq:john_doe",
									"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. Note that the `email` field is not supported.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
								},
								{
									"key": "offset",
									"value": "10",
									"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
								}
							]
						},
						"description": "This operation retrieves a list of users based on the specified criteria."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name:asc&include=user_name,password&select=created_at.gt:2024-04-23,user_name.eq:john_doe&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "user_name,password",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,user_name.eq:john_doe",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. Note that the `email` field is not supported.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"results\": [\n    {\n      \"user_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"email\": \"johndoe@gmail.com\",\n      \"password\": \"P@ssw0rd!\",\n      \"role\": \"manager\",\n      \"user_name\": \"john_doe\"\n    },\n    {\n      \"user_id\": \"674d0bf5c28b69001f8e03a1\",\n      \"created_at\": \"2024-04-22T10:00:00Z\",\n      \"updated_at\": \"2024-04-22T10:00:00Z\",\n      \"email\": \"johndoe@gmail.com\",\n      \"password\": \"P@ssw0rd!\",\n      \"role\": \"manager\",\n      \"user_name\": \"john_doe\"\n    }\n  ],\n  \"total_results\": 20\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name:asc&include=user_name,password&select=created_at.gt:2024-04-23,user_name.eq:john_doe&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "user_name,password",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,user_name.eq:john_doe",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. Note that the `email` field is not supported.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name:asc&include=user_name,password&select=created_at.gt:2024-04-23,user_name.eq:john_doe&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "user_name,password",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,user_name.eq:john_doe",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. Note that the `email` field is not supported.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name:asc&include=user_name,password&select=created_at.gt:2024-04-23,user_name.eq:john_doe&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "user_name,password",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,user_name.eq:john_doe",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. Note that the `email` field is not supported.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?sort=user_name:asc&include=user_name,password&select=created_at.gt:2024-04-23,user_name.eq:john_doe&limit=20&offset=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "user_name:asc",
											"description": "Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.\n"
										},
										{
											"key": "include",
											"value": "user_name,password",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										},
										{
											"key": "select",
											"value": "created_at.gt:2024-04-23,user_name.eq:john_doe",
											"description": "Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. Note that the `email` field is not supported.\n\n**Basic Equality (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n- **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):** Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.\n"
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.\n"
										},
										{
											"key": "offset",
											"value": "10",
											"description": "Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Get a user's details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:user_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":user_id"
							],
							"query": [
								{
									"key": "include",
									"value": "user_name,role",
									"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "user_id",
									"value": "66294b2a4475a41f3e709bc9",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation retrieves information about a user identified by its unique user ID."
					},
					"response": [
						{
							"name": "Successful operation. The response body contains the requested data.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id?include=user_name,role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "include",
											"value": "user_name,role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"user_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id?include=user_name,role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "include",
											"value": "user_name,role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id?include=user_name,role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "include",
											"value": "user_name,role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id?include=user_name,role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "include",
											"value": "user_name,role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id?include=user_name,role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "include",
											"value": "user_name,role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id?include=user_name,role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "include",
											"value": "user_name,role",
											"description": "Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.\n"
										}
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Update a user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:user_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":user_id"
							],
							"variable": [
								{
									"key": "user_id",
									"value": "66294b2a4475a41f3e709bc9",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation updates an existing user with the provided data."
					},
					"response": [
						{
							"name": "Resource updated successfully. The response body contains the updated resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"user_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}"
						},
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"johndoe@gmail.com\",\n  \"password\": \"P@ssw0rd!\",\n  \"role\": \"manager\",\n  \"user_name\": \"john_doe\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Delete a user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:user_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":user_id"
							],
							"variable": [
								{
									"key": "user_id",
									"value": "66294b2a4475a41f3e709bca",
									"description": "(Required) The unique identifier for the resource."
								}
							]
						},
						"description": "This operation deletes an existing user identified by its unique user ID."
					},
					"response": [
						{
							"name": "No content. The operation was successful, and there is no content to return.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for managing user accounts, including registration, profile management, and authentication"
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Authenticate user",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{clientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{clientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token"
							]
						},
						"description": "This operation exchanges the user's username and password directly for an access token. The client ID and client secret are used for client authentication (basic). Certain endpoints require the access token in the Authorization header to perform admin functions like creating menus."
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"auth_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"access_token\": \"fa0b97b2-445f-41d2-b50f-fb3b014a301e\",\n  \"expires_at\": \"2024-04-22T10:00:00Z\",\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\",\n  \"token_type\": \"Bearer\",\n  \"user_name\": \"john_doe\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "The request could not be completed due to a conflict with the current state of the resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic <credentials>",
										"description": "Added as a part of security scheme: basic"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"grant_type\": \"password\",\n  \"user_name\": \"john_doe\",\n  \"password\": \"P@ssw0rd!\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				},
				{
					"name": "Refresh access token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh-token"
							]
						},
						"description": "This operation refreshes a access token using the refresh token, providing a new access token and refresh token to the user without requiring reauthentication."
					},
					"response": [
						{
							"name": "Resource created successfully. The response body contains the newly created resource.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Location",
									"value": "in pariatur",
									"description": {
										"content": "Points to the resource endpoint for the newly created resource",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"auth_id\": \"674d0bf5c28b69001f8e03a1\",\n  \"created_at\": \"2024-04-22T10:00:00Z\",\n  \"updated_at\": \"2024-04-22T10:00:00Z\",\n  \"access_token\": \"fa0b97b2-445f-41d2-b50f-fb3b014a301e\",\n  \"expires_at\": \"2024-04-22T10:00:00Z\",\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\",\n  \"token_type\": \"Bearer\",\n  \"user_name\": \"john_doe\"\n}"
						},
						{
							"name": "Bad request. The request was malformed or invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized. Authentication is required, or the provided credentials are invalid.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden. The server understood the request, but it refuses to authorize it. Authentication will not help.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not found. The requested resource does not exist.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						},
						{
							"name": "Internal server error. An unexpected error occurred on the server.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh_token\": \"d1a3e281-96b6-4f77-a587-7b6c8c2a96d9\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"title\": \"Human-readable error title.\",\n  \"detail\": \"Human-readable error details.\"\n}"
						}
					]
				}
			],
			"description": "Operations for user authentication, including login, token refresh, and logout"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:4010/"
		}
	]
}