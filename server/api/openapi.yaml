openapi: 3.0.3
info:
  title: Point of Service (POS) API
  description: REST API to be used to create tableside food ordering applications.
  contact:
    email: mawentowski@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0'
servers:
  - url: http://localhost:4010/
    description: Prism proxy server
  - url: http://localhost:8080/
    description: API server
tags:
  - name: Orders
    description:
      "Operations related to managing orders, including creation, modification,\
      \ and status updates"
  - name: Dishes
    description:
      "Operations for managing dishes, including adding, updating, and deleting\
      \ dishes"
  - name: Ingredients
    description:
      "Operations for managing ingredients used in dishes, including adding,\
      \ updating, and deleting ingredients"
  - name: Menus
    description:
      "Operations for managing menus, which organize dishes into categories\
      \ or sections"
  - name: Categories
    description:
      "Operations for categorizing dishes in menus, allowing for easy navigation\
      \ and organization"
  - name: Users
    description:
      "Operations for managing user accounts, including registration, profile\
      \ management, and authentication"
  - name: Auth
    description:
      "Operations for user authentication, including login, token refresh,\
      \ and logout"
paths:
  /orders:
    get:
      tags:
        - Orders
      summary: Get a list of orders
      description:
        This operation retrieves a list of orders based on specified query
        parameters. It is commonly used to view the `status` and `priority` of orders
        on the current day or view historical orders for inventory and analytics purposes.
      operationId: getOrderList
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: priority:asc
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'table_number,status,priority'
        - name: select
          in: query
          description: |
            Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.

            **Basic Equality (eq):**
            - For exact matches, use `eq:value`.

            **Comparison Operators:**
            - **Less Than (lt):** Use `lt:value`.
            - **Less Than or Equal To (lte):** Use `lte:value`.
            - **Greater Than (gt):** Use `gt:value`.
            - **Greater Than or Equal To (gte):** Use `gte:value`.

            Separate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'created_at.gte:2024-05-07,status.eq:in_progress'
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.
          required: false
          style: form
          explode: true
          schema:
            maximum: 30
            type: integer
          example: 10
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Orders
    post:
      tags:
        - Orders
      summary: Create an order
      description: |
        This operation can be used to create an order when a patron places an order via a mobile app, tablet app, self-service kiosk, etc., depending on the API consumer's use case.
      operationId: postOrder
      requestBody:
        $ref: '#/components/requestBodies/CreateOrderRequest'
      responses:
        '201':
          description: |
            Resource created successfully. The response body contains the newly created resource.

            The server logic applies to the response body as follows:

            - The default `priority` is `3` out of `5`, indicating medium priority. Restaurant staff may adjust the priority based on factors like preparation time.
            - The `status` is set to `received`. Restaurant staff update the status as the order progresses toward completion.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Orders
  /orders/{order_id}:
    get:
      tags:
        - Orders
      summary: Get an order's details
      description: |
        This operation retrieves detailed information about a specific order identified by its unique order ID.
      operationId: getOrder
      parameters:
        - name: order_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bcc
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'table_number,status,priority'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Orders
    put:
      tags:
        - Orders
      summary: Update an order
      description: |
        This operation updates an existing order with the provided data. You can modify the order's status, priority, and the list of dishes associated with it.
      operationId: putOrder
      parameters:
        - name: order_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bcd
      requestBody:
        $ref: '#/components/requestBodies/UpdateOrderRequest'
      responses:
        '200':
          description:
            Resource updated successfully. The response body contains the
            updated resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Orders
    delete:
      tags:
        - Orders
      summary: Delete an order
      description: |
        This operation deletes an existing order identified by its unique order ID.
      operationId: deleteOrder
      parameters:
        - name: order_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bca
      responses:
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Orders
  /orders/{order_id}/dishes:
    get:
      tags:
        - Orders
      summary: Retrieve dishes for an order
      description: |
        This operation retrieves a list of dishes belonging to a specific order. Each dish object returned contains detailed information about the dish and which ingredients are essential to preparing the dish.
      operationId: getOrderDishes
      parameters:
        - name: order_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bcb
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,description,price'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Orders
  /dishes:
    get:
      tags:
        - Dishes
      summary: Get a list of dishes
      description: |
        This operation retrieves a list of dishes based on the specified criteria. You can sort the results, include specific properties, select dishes that match certain criteria, and paginate through the results.
      operationId: getDishList
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: name:asc
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,price,station,ingredients'
        - name: select
          in: query
          description:
            "Selection filters to display resources matching the provided\
            \ criteria. Use the format `fieldName.operator:value`. \n**Basic Equality\
            \ (eq):**\n- For exact matches, use `eq:value`.\n\n**Comparison Operators:**\n\
            - **Less Than (lt):** Use `lt:value`.\n- **Less Than or Equal To (lte):**\
            \ Use `lte:value`.\n- **Greater Than (gt):** Use `gt:value`.\n- **Greater\
            \ Than or Equal To (gte):** Use `gte:value`.\n\nSeparate multiple filters\
            \ with commas. Dates should be in `YYYY-MM-DD` format.\n"
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: price.lt:9.99
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.
          required: false
          style: form
          explode: true
          schema:
            maximum: 30
            type: integer
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Dishes
    post:
      tags:
        - Dishes
      summary: Create a dish
      description: |
        This operation creates a new dish with the provided information. The `dish_id` returned in the response can be used to associate the dish with an order.

        Each `ingredient_id` should refer to an ingredient currently in the system. For each ingredient, set the value of `is_essential` to `true` if the ingredient is required to prepare the dish. It's considered a best practice to ensure that each essential ingredient has a positive quantity. This helps determine if the dish should be selectable in the user interface.
      operationId: postDishes
      requestBody:
        $ref: '#/components/requestBodies/CreateDishRequest'
      responses:
        '201':
          description:
            Resource created successfully. The response body contains the
            newly created resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Dishes
  /dishes/{dish_id}:
    get:
      tags:
        - Dishes
      summary: Get a dish's details
      description: |
        Retrieve detailed information about a specific dish identified by its unique dish ID.
      operationId: getDish
      parameters:
        - name: dish_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bd1
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,description,price'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Dishes
    put:
      tags:
        - Dishes
      summary: Update a dish
      description: |
        This operation updates an existing dish with the provided data.
      operationId: putDish
      parameters:
        - name: dish_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bce
      requestBody:
        $ref: '#/components/requestBodies/UpdateDishRequest'
      responses:
        '200':
          description:
            Resource updated successfully. The response body contains the
            updated resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Dishes
    delete:
      tags:
        - Dishes
      summary: Delete a dish
      description:
        This operation deletes an existing dish identified by its unique
        dish ID.
      operationId: deleteDish
      parameters:
        - name: dish_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bd0
      responses:
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Dishes
  /dishes/{dish_id}/ingredients:
    get:
      tags:
        - Dishes
      summary: Get a dish's ingredients
      description:
        "This operation retrieves a list of ingredients belonging to a\
        \ specific dish. Importantly, the `in_stock_qty` for a dish indicates how\
        \ much of the ingredient is available."
      operationId: getDishIngredients
      parameters:
        - name: dish_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bd2
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,in_stock_qty'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Dishes
  /ingredients:
    get:
      tags:
        - Ingredients
      summary: Get a list of ingredients
      description:
        "This operation retrieves a list of ingredients based on the specified\
        \ criteria. You can sort the results, include specific properties, select\
        \ ingredients that match certain criteria, and paginate through the results."
      operationId: getIngredientList
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: in_stock_qty:asc
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,in_stock_qty'
        - name: select
          in: query
          description: |
            Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.

            **Basic Equality (eq):**
            - For exact matches, use `eq:value`.

            **Comparison Operators:**
            - **Less Than (lt):** Use `lt:value`.
            - **Less Than or Equal To (lte):** Use `lte:value`.
            - **Greater Than (gt):** Use `gt:value`.
            - **Greater Than or Equal To (gte):** Use `gte:value`.

            Separate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: in_stock_qty.eq:0
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.
          required: false
          style: form
          explode: true
          schema:
            maximum: 30
            type: integer
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Ingredients
    post:
      tags:
        - Ingredients
      summary: Create an ingredient
      description:
        "This operation creates a new ingredient with the provided information.\
        \ Set an initial quantity of the ingredient using the `in_stock_qty` field.\n\
        \    \nThe `ingredient_id` returned in the response can be used to associate\
        \ the ingredient with a dish. The `in_stock_qty` can be used to track if the\
        \ ingredient has a positive quantity.\n"
      operationId: postIngredient
      requestBody:
        $ref: '#/components/requestBodies/CreateIngredientRequest'
      responses:
        '201':
          description: |
            Resource created successfully. The response body contains the newly created resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Ingredients
  /ingredients/{ingredient_id}:
    get:
      tags:
        - Ingredients
      summary: Get an ingredient's details
      description:
        This operation retrieves information about a specific ingredient
        identified by its unique ingredient ID.
      operationId: getIngredient
      parameters:
        - name: ingredient_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 614d706b67c122001f35cc47
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'in_stock_qty,name'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Ingredients
    put:
      tags:
        - Ingredients
      summary: Update an ingredient
      description:
        "This operation updates an ingredient using the provided information.\
        \ Using this operation, API consumers can update the `in_stock_qty` of ingredients\
        \ when orders are placed."
      operationId: putIngredient
      parameters:
        - name: ingredient_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 617d2e09ec42e0001f41bf84
      requestBody:
        $ref: '#/components/requestBodies/UpdateIngredientRequest'
      responses:
        '200':
          description:
            Successful operation. The response body contains the updated
            resource.
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Ingredients
    delete:
      tags:
        - Ingredients
      summary: Delete an ingredient
      description:
        This operation deletes an existing order identified by its unique
        order ID.
      operationId: deleteIngredient
      parameters:
        - name: ingredient_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 61c8c34bb02368001f8f0812
      responses:
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Ingredients
  /menus:
    get:
      tags:
        - Menus
      summary: Get a list of menus
      description:
        This operation retrieves a list of menus based on the specified
        criteria.
      operationId: getMenuList
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: name:asc
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,category_ids'
        - name: select
          in: query
          description: |
            Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.

            **Basic Equality (eq):**
            - For exact matches, use `eq:value`.

            **Comparison Operators:**
            - **Less Than (lt):** Use `lt:value`.
            - **Less Than or Equal To (lte):** Use `lte:value`.
            - **Greater Than (gt):** Use `gt:value`.
            - **Greater Than or Equal To (gte):** Use `gte:value`.

            Separate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'created_at.gt:2024-04-23,name.eq:dinner'
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.
          required: false
          style: form
          explode: true
          schema:
            maximum: 30
            type: integer
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Menus
    post:
      tags:
        - Menus
      summary: Create a menu
      description: This operation creates a new menu with the provided information.
      operationId: postMenu
      requestBody:
        $ref: '#/components/requestBodies/CreateMenuRequest'
      responses:
        '201':
          description:
            Resource created successfully. The response body contains the
            newly created resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Menus
  /menus/{menu_id}:
    get:
      tags:
        - Menus
      summary: View a menu
      description:
        This operation retrieves information about a menu identified by
        its unique menu ID.
      operationId: getMenu
      parameters:
        - name: menu_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 6220a6a8d01d24001f27d3ff
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,category_ids'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Menus
    put:
      tags:
        - Menus
      summary: Update a menu
      description: This operation updates an existing menu with the provided data.
      operationId: putMenu
      parameters:
        - name: menu_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 62a26aa41c7c5c001f627a4f
      requestBody:
        $ref: '#/components/requestBodies/UpdateMenuRequest'
      responses:
        '200':
          description:
            Successful operation. The response body contains the updated
            resource.
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Menus
    delete:
      tags:
        - Menus
      summary: Delete a menu
      description:
        This operation deletes an existing menu identified by its unique
        menu ID.
      operationId: deleteMenu
      parameters:
        - name: menu_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 6261c0e33e5cf4f29b4641c4
      responses:
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Menus
  /menus/{menu_id}/categories:
    get:
      tags:
        - Menus
      summary: View a menu's categories
      description:
        This operation retrieves a list of categories belonging to a specific
        menu.
      operationId: getMenuCategories
      parameters:
        - name: menu_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 62f7c50e47410a001f512d4d
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,dish_ids'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Menus
  /categories:
    get:
      tags:
        - Categories
      summary: Get a list of categories
      description:
        This operation retrieves a list of categories based on the specified
        criteria.
      operationId: getCategoryList
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: name:asc
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,dish_ids'
        - name: select
          in: query
          description: |
            Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`.

            **Basic Equality (eq):**
            - For exact matches, use `eq:value`.

            **Comparison Operators:**
            - **Less Than (lt):** Use `lt:value`.
            - **Less Than or Equal To (lte):** Use `lte:value`.
            - **Greater Than (gt):** Use `gt:value`.
            - **Greater Than or Equal To (gte):** Use `gte:value`.

            Separate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'created_at.gt:2024-04-23,name.eq:main_course'
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.
          required: false
          style: form
          explode: true
          schema:
            maximum: 30
            type: integer
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Categories
    post:
      tags:
        - Categories
      summary: Create a category
      description:
        "This operation creates a new category with the provided information.\
        \ Categories can be used to organize/group dishes in food ordering apps. For\
        \ example, displaying tabs for each category. \n\nThe `category_id` returned\
        \ in the response can be used to associate the category with a menu.\n"
      operationId: postCategory
      requestBody:
        $ref: '#/components/requestBodies/CreateCategoryRequest'
      responses:
        '201':
          description: |
            Resource created successfully. The response body contains the newly created resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Categories
  /categories/{category_id}:
    get:
      tags:
        - Categories
      summary: Get a category's details
      description:
        This operation retrieves information about a category identified
        by its unique category ID.
      operationId: getCategory
      parameters:
        - name: category_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 632a14b6d004f3001f12c8c8
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'name,dish_ids'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Categories
    put:
      tags:
        - Categories
      summary: Update a category
      description: This operation updates an existing category with the provided data.
      operationId: putCategory
      parameters:
        - name: category_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 643e8ef8b5a1e8001f7ecb16
      requestBody:
        $ref: '#/components/requestBodies/UpdateCategoryRequest'
      responses:
        '200':
          description:
            Successful operation. The response body contains the updated
            resource.
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Categories
    delete:
      tags:
        - Categories
      summary: Delete a category
      description:
        This operation deletes an existing category identified by its unique
        category ID.
      operationId: deleteCategory
      parameters:
        - name: category_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 63c896f844697e001f1a19c0
      responses:
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Categories
  /categories/{category_id}/dishes:
    get:
      tags:
        - Categories
      summary: View a category's dishes
      description:
        This operation retrieves a list of dishes belonging to a specific
        category. Each dish object returned contains detailed information about the
        dish and which ingredients are essential to preparing the dish.
      operationId: getCategoryDishes
      parameters:
        - name: category_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 65bf24fc1f1b5c001f1d99fd
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Categories
  /users:
    get:
      tags:
        - Users
      summary: Get a list of users
      description:
        This operation retrieves a list of users based on the specified
        criteria.
      operationId: getAllUsers
      parameters:
        - name: sort
          in: query
          description: |
            Sort fields in ascending or descending order. To sort ascending, postfix the field name with `:asc`. To sort descending, postfix the field name with `:desc`.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: user_name:asc
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'user_name,password'
        - name: select
          in: query
          description: |
            Selection filters to display resources matching the provided criteria. Use the format `fieldName.operator:value`. Note that the `email` field is not supported.

            **Basic Equality (eq):**
            - For exact matches, use `eq:value`.

            **Comparison Operators:**
            - **Less Than (lt):** Use `lt:value`.
            - **Less Than or Equal To (lte):** Use `lte:value`.
            - **Greater Than (gt):** Use `gt:value`.
            - **Greater Than or Equal To (gte):** Use `gte:value`.

            Separate multiple filters with commas. Dates should be in `YYYY-MM-DD` format.
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'created_at.gt:2024-04-23,user_name.eq:john_doe'
        - name: limit
          in: query
          description: |
            Pagination filter for the maximum number of results to return in the response. If `limit` is used in conjunction with `offset`, then page-based pagination is applied.
          required: false
          style: form
          explode: true
          schema:
            maximum: 30
            type: integer
          example: 20
        - name: offset
          in: query
          description: |
            Offest-based pagination filter for the number of results to skip before displaying resources. A value of `0` will display resources from the beginning of the list. Only affects the response data if a `limit` value is set.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Users
    post:
      tags:
        - Users
      summary: Create a user account
      description:
        This operation creates a new user with the provided information.
        The API server uses `role` to determine the the access rights of the user.
        The `email` field is used for password reset.
      operationId: postUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUserRequest'
      responses:
        '201':
          description:
            Resource created successfully. The response body contains the
            newly created resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. The request was malformed or invalid.
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security: []
      x-swagger-router-controller: Users
  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get a user's details
      description:
        This operation retrieves information about a user identified by
        its unique user ID.
      operationId: getUser
      parameters:
        - name: user_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bc9
        - name: include
          in: query
          description: |
            Projection filters for including only certain resource properties in the response. The value for the parameter should be a comma-separated list of properties from the schema.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 'user_name,role'
      responses:
        '200':
          description:
            Successful operation. The response body contains the requested
            data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Users
    put:
      tags:
        - Users
      summary: Update a user
      description: This operation updates an existing user with the provided data.
      operationId: putUser
      parameters:
        - name: user_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bc9
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequest'
      responses:
        '200':
          description:
            Resource updated successfully. The response body contains the
            updated resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Users
    delete:
      tags:
        - Users
      summary: Delete a user
      description:
        This operation deletes an existing user identified by its unique
        user ID.
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: The unique identifier for the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 66294b2a4475a41f3e709bca
      responses:
        '204':
          description:
            "No content. The operation was successful, and there is no\
            \ content to return."
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - AccessToken: []
      x-swagger-router-controller: Users
  /auth/token:
    post:
      tags:
        - Auth
      summary: Authenticate user and obtain a access token
      description:
        This operation exchanges the user's username and password directly
        for an access token. The client ID and client secret are used for client authentication
        (basic). Certain endpoints require the access token in the Authorization header
        to perform admin functions like creating menus.
      operationId: postAuthLogin
      requestBody:
        $ref: '#/components/requestBodies/CreateTokenRequest'
      responses:
        '201':
          description:
            Resource created successfully. The response body contains the
            newly created resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '400':
          description: Bad request. The request was malformed or invalid.
        '409':
          description:
            The request could not be completed due to a conflict with the
            current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - BasicAuth: []
      x-swagger-router-controller: Auth
  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description:
        "This operation refreshes a access token using the refresh token,\
        \ providing a new access token and refresh token to the user without requiring\
        \ reauthentication."
      operationId: postAuthRefreshToken
      requestBody:
        description: Request body containing information used to create the resource.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_refreshtoken_body'
        required: true
      responses:
        '201':
          description:
            Resource created successfully. The response body contains the
            newly created resource.
          headers:
            Location:
              description: Points to the resource endpoint for the newly created resource
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '400':
          description: Bad request. The request was malformed or invalid.
        '401':
          description:
            "Unauthorized. Authentication is required, or the provided\
            \ credentials are invalid."
        '403':
          description:
            "Forbidden. The server understood the request, but it refuses\
            \ to authorize it. Authentication will not help."
        '404':
          description: Not found. The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description:
            Internal server error. An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-swagger-router-controller: Auth
components:
  schemas:
    AccessToken:
      type: string
      description:
        A UUID to access protected resources on behalf of the resource
        owner. Normally has a relatively short lifespan and needs to be refreshed
        periodically.
      example: fa0b97b2-445f-41d2-b50f-fb3b014a301e
    Auth:
      type: object
      properties:
        auth_id:
          $ref: '#/components/schemas/Id'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        access_token:
          $ref: '#/components/schemas/AccessToken'
        expires_at:
          $ref: '#/components/schemas/ExpiresAt'
        refresh_token:
          $ref: '#/components/schemas/RefreshToken'
        token_type:
          $ref: '#/components/schemas/TokenType'
        user_name:
          $ref: '#/components/schemas/UserName'
      description:
        "Defines a set of properties related to authentication and authorization\
        \ tokens, particularly used in OAuth 2.0 flows."
      example:
        access_token: fa0b97b2-445f-41d2-b50f-fb3b014a301e
        refresh_token: d1a3e281-96b6-4f77-a587-7b6c8c2a96d9
        expires_at: 2024-04-22T10:00:00Z
        auth_id: 674d0bf5c28b69001f8e03a1
        updated_at: 2024-04-22T10:00:00Z
        user_name: john_doe
        created_at: 2024-04-22T10:00:00Z
        token_type: Bearer
    Category:
      type: object
      properties:
        category_id:
          $ref: '#/components/schemas/Id'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        dish_ids:
          $ref: '#/components/schemas/DishIds'
        name:
          $ref: '#/components/schemas/Name'
      example:
        category_id: 674d0bf5c28b69001f8e03a1
        updated_at: 2024-04-22T10:00:00Z
        dish_ids:
          - 692a4a34a46ecf001f35ac6f
          - 6a4a857c022eb7001f9b8972
          - 6b7c2441a0db43001f9bf377
        name: main_course
        created_at: 2024-04-22T10:00:00Z
    CategoryIds:
      type: array
      description: Contains the unique identifiers of categories to add to the menu.
      example:
        - 66294b2a4475a41f3e709bbc
        - 66294b2a4475a41f3e709bbd
        - 66294b2a4475a41f3e709bbe
      items:
        type: string
    CreatedAt:
      type: string
      description: Timestamp when the resource was created in ISO 8601 format.
      format: date-time
      readOnly: true
      example: 2024-04-22T10:00:00Z
    Description:
      type: string
      example: A description of the resource.
    Dish:
      type: object
      properties:
        dish_id:
          $ref: '#/components/schemas/Id'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        description:
          $ref: '#/components/schemas/Description'
        image_name:
          $ref: '#/components/schemas/ImageName'
        ingredients:
          $ref: '#/components/schemas/Ingredients'
        name:
          $ref: '#/components/schemas/Name'
        price:
          $ref: '#/components/schemas/Price'
        station:
          $ref: '#/components/schemas/Station'
      example:
        dish_id: 674d0bf5c28b69001f8e03a1
        image_name: burger.jpg
        updated_at: 2024-04-22T10:00:00Z
        price: 9.99
        name: main_course
        station: hot
        created_at: 2024-04-22T10:00:00Z
        description: A description of the resource.
        ingredients:
          - - ingredient_id: 66294b2a4475a41f3e709bc5
              is_essential: true
            - ingredient_id: 66294b2a4475a41f3e709bc6
              is_essential: true
            - ingredient_id: 66294b2a4475a41f3e709bc7
              is_essential: false
          - - ingredient_id: 66294b2a4475a41f3e709bc5
              is_essential: true
            - ingredient_id: 66294b2a4475a41f3e709bc6
              is_essential: true
            - ingredient_id: 66294b2a4475a41f3e709bc7
              is_essential: false
    DishIds:
      type: array
      description: Contains the unique identifiers of dishes to add to the order.
      example:
        - 692a4a34a46ecf001f35ac6f
        - 6a4a857c022eb7001f9b8972
        - 6b7c2441a0db43001f9bf377
      items:
        type: string
    Email:
      type: string
      description:
        The email address of the user that can be used for password resets.
        It cannot be used for querying.
      format: email
      example: johndoe@gmail.com
    ExpiresAt:
      type: string
      description: The timestamp when the access token becomes invalid.
      format: date-time
      readOnly: true
      example: 2024-04-22T10:00:00Z
    RefreshToken:
      type: string
      description: |
        A UUID used to obtain a new access token when the current one expires. It has a longer lifespan compared to access tokens.
      example: d1a3e281-96b6-4f77-a587-7b6c8c2a96d9
    GivenName:
      pattern: "^[^\\s]*$"
      type: string
      description:
        The first name of the patron that placed the order. Cannot contain
        spaces.
      example: John
    Id:
      type: string
      description: The unique identifier for the resource.
      readOnly: true
      example: 674d0bf5c28b69001f8e03a1
    ImageName:
      type: string
      description: |
        API consumers can use this string to generate the asset URL for displaying the dish image in user interfaces.
      example: burger.jpg
    Ingredients:
      type: array
      description: List of ingredients used during the preparation of the dish.
      items:
        $ref: '#/components/schemas/Ingredients_inner'
    Ingredient:
      type: object
      properties:
        ingredient_id:
          $ref: '#/components/schemas/Id'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        name:
          $ref: '#/components/schemas/Name'
        in_stock_qty:
          $ref: '#/components/schemas/InStockQty'
      example:
        updated_at: 2024-04-22T10:00:00Z
        ingredient_id: 674d0bf5c28b69001f8e03a1
        name: main_course
        created_at: 2024-04-22T10:00:00Z
        in_stock_qty: 3
    InStockQty:
      type: integer
      description:
        The quantity of the ingredient in the restaurant's inventory. The
        quantity of the ingredient should be managed by the API consumer.
      example: 3
    Name:
      type: string
      description: ''
      example: Main course
    Menu:
      type: object
      properties:
        order_id:
          $ref: '#/components/schemas/Id'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        category_ids:
          $ref: '#/components/schemas/CategoryIds'
        name:
          $ref: '#/components/schemas/Name'
      example:
        updated_at: 2024-04-22T10:00:00Z
        name: main_course
        created_at: 2024-04-22T10:00:00Z
        category_ids:
          - 66294b2a4475a41f3e709bbc
          - 66294b2a4475a41f3e709bbd
          - 66294b2a4475a41f3e709bbe
        order_id: 674d0bf5c28b69001f8e03a1
    Order:
      type: object
      properties:
        order_id:
          $ref: '#/components/schemas/Id'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        dish_ids:
          $ref: '#/components/schemas/DishIds'
        given_name:
          $ref: '#/components/schemas/GivenName'
        priority:
          $ref: '#/components/schemas/Priority'
        scheduled_at:
          $ref: '#/components/schemas/ScheduledAt'
        status:
          $ref: '#/components/schemas/Status'
        table_number:
          $ref: '#/components/schemas/TableNumber'
      example:
        updated_at: 2024-04-22T10:00:00Z
        dish_ids:
          - 692a4a34a46ecf001f35ac6f
          - 6a4a857c022eb7001f9b8972
          - 6b7c2441a0db43001f9bf377
        table_number: 8
        created_at: 2024-04-22T10:00:00Z
        scheduled_at: 2000-01-23T04:56:07.000+00:00
        given_name: John
        priority: 0
        order_id: 674d0bf5c28b69001f8e03a1
        status: received
    Password:
      type: string
      description:
        "A password must be at least 8 characters long and contain at least\
        \ one uppercase letter, one lowercase letter, one digit, and one special character\
        \ (@, $, !, %, *, ?, &)."
      example: P@ssw0rd!
    Price:
      type: number
      description: The cost of the dish.
      format: float
      example: 9.99
    Priority:
      maximum: 5
      minimum: 0
      type: integer
      description:
        "Order priority from `1` to `5` (i.e., greatest to least priority).\
        \ Priority is normally adjusted by kitchen staff."
      default: 3
    Problem:
      required:
        - detail
        - title
      type: object
      properties:
        title:
          type: string
          description: Human-readable error title.
          example: Human-readable error title.
        detail:
          type: string
          description: Human-readable error details.
          example: Human-readable error details.
    Role:
      type: string
      description: The role that determines a user's access rights to resources.
      example: manager
      enum:
        - patron
        - expeditor
        - chef
        - manager
    ScheduledAt:
      type: string
      description: The timestamp indicating when the order is scheduled for.
      format: date-time
      nullable: true
    Station:
      type: string
      description: |
        The restaurant kitchen has 3 stations where food is prepared:
          - cold: This area is responsible for preparing cold appetizers, salads, and desserts that don't require cooking.
          - hot: Also known as the "hot line" or "hot side," this area handles dishes that require cooking over heat, such as sautéing, frying, grilling, and baking.
          - beverages: In addition to coffee bars, there may be stations dedicated to preparing other beverages such as cocktails, smoothies, or fresh juices.
      example: hot
      enum:
        - cold
        - hot
        - beverages
    Status:
      type: string
      description:
        "The status of the order as it progresses toward completion:\n\n\
        - **`received`**: The patron has placed an order, displaying details in the\
        \ expeditor's KDS. \n- **`in_progress`**: The expeditor prioritizes the order,\
        \ displaying relevant parts in the respective KDS stations for preparation.\n\
        - **`ready_for_assembly`**: Stations mark dishes as ready, and the expeditor\
        \ assembles the order.\n  - **Table-side**: The expeditor changes the status\
        \ to `on_the_way`, and a food runner delivers it.\n  - **Takeaway**: The expeditor\
        \ changes the status to `ready_for_pickup`, and the patron collects it at\
        \ the pickup station.\n"
      nullable: true
      example: received
      enum:
        - received
        - in_progress
        - ready_for_assembly
        - on_the_way
        - ready_for_pickup
    TableNumber:
      type: integer
      description: |
        The table number tells the staff where in the the patron is located. Set the value to `null` for a takeaway order.
      nullable: true
      example: 8
    TokenType:
      type: string
      description: Describes how the access token can be used.
      example: Bearer
    UpdatedAt:
      type: string
      description: Timestamp when the order was created in ISO 8601 format.
      format: date-time
      readOnly: true
      example: 2024-04-22T10:00:00Z
    User:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/Id'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
        role:
          $ref: '#/components/schemas/Role'
        user_name:
          $ref: '#/components/schemas/UserName'
      example:
        password: P@ssw0rd!
        role: manager
        updated_at: 2024-04-22T10:00:00Z
        user_id: 674d0bf5c28b69001f8e03a1
        user_name: john_doe
        created_at: 2024-04-22T10:00:00Z
        email: johndoe@gmail.com
    UserName:
      type: string
      description: The user name of the user for login purposes. Cannot contain spaces.
      example: john_doe
    inline_response_200:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        total_results:
          type: integer
          example: 20
      example:
        results:
          - updated_at: 2024-04-22T10:00:00Z
            dish_ids:
              - 692a4a34a46ecf001f35ac6f
              - 6a4a857c022eb7001f9b8972
              - 6b7c2441a0db43001f9bf377
            table_number: 8
            created_at: 2024-04-22T10:00:00Z
            scheduled_at: 2000-01-23T04:56:07.000+00:00
            given_name: John
            priority: 0
            order_id: 674d0bf5c28b69001f8e03a1
            status: received
          - updated_at: 2024-04-22T10:00:00Z
            dish_ids:
              - 692a4a34a46ecf001f35ac6f
              - 6a4a857c022eb7001f9b8972
              - 6b7c2441a0db43001f9bf377
            table_number: 8
            created_at: 2024-04-22T10:00:00Z
            scheduled_at: 2000-01-23T04:56:07.000+00:00
            given_name: John
            priority: 0
            order_id: 674d0bf5c28b69001f8e03a1
            status: received
        total_results: 20
    inline_response_200_1:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        total_results:
          type: integer
          example: 1
      example:
        results:
          - updated_at: 2024-04-22T10:00:00Z
            dish_ids:
              - 692a4a34a46ecf001f35ac6f
              - 6a4a857c022eb7001f9b8972
              - 6b7c2441a0db43001f9bf377
            table_number: 8
            created_at: 2024-04-22T10:00:00Z
            scheduled_at: 2000-01-23T04:56:07.000+00:00
            given_name: John
            priority: 0
            order_id: 674d0bf5c28b69001f8e03a1
            status: received
          - updated_at: 2024-04-22T10:00:00Z
            dish_ids:
              - 692a4a34a46ecf001f35ac6f
              - 6a4a857c022eb7001f9b8972
              - 6b7c2441a0db43001f9bf377
            table_number: 8
            created_at: 2024-04-22T10:00:00Z
            scheduled_at: 2000-01-23T04:56:07.000+00:00
            given_name: John
            priority: 0
            order_id: 674d0bf5c28b69001f8e03a1
            status: received
        total_results: 1
    inline_response_200_2:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
        total_results:
          type: integer
          example: 1
      example:
        results:
          - dish_id: 674d0bf5c28b69001f8e03a1
            image_name: burger.jpg
            updated_at: 2024-04-22T10:00:00Z
            price: 9.99
            name: main_course
            station: hot
            created_at: 2024-04-22T10:00:00Z
            description: A description of the resource.
            ingredients:
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
          - dish_id: 674d0bf5c28b69001f8e03a1
            image_name: burger.jpg
            updated_at: 2024-04-22T10:00:00Z
            price: 9.99
            name: main_course
            station: hot
            created_at: 2024-04-22T10:00:00Z
            description: A description of the resource.
            ingredients:
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
        total_results: 1
    inline_response_200_3:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
        total_results:
          type: integer
          description: The number of resources returned in the response.
          example: 20
      example:
        results:
          - dish_id: 674d0bf5c28b69001f8e03a1
            image_name: burger.jpg
            updated_at: 2024-04-22T10:00:00Z
            price: 9.99
            name: main_course
            station: hot
            created_at: 2024-04-22T10:00:00Z
            description: A description of the resource.
            ingredients:
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
          - dish_id: 674d0bf5c28b69001f8e03a1
            image_name: burger.jpg
            updated_at: 2024-04-22T10:00:00Z
            price: 9.99
            name: main_course
            station: hot
            created_at: 2024-04-22T10:00:00Z
            description: A description of the resource.
            ingredients:
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
        total_results: 20
    inline_response_200_4:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        total_results:
          type: integer
          example: 1
      example:
        results:
          - updated_at: 2024-04-22T10:00:00Z
            ingredient_id: 674d0bf5c28b69001f8e03a1
            name: main_course
            created_at: 2024-04-22T10:00:00Z
            in_stock_qty: 3
          - updated_at: 2024-04-22T10:00:00Z
            ingredient_id: 674d0bf5c28b69001f8e03a1
            name: main_course
            created_at: 2024-04-22T10:00:00Z
            in_stock_qty: 3
        total_results: 1
    inline_response_200_5:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Menu'
        total_results:
          type: integer
          example: 1
      example:
        results:
          - updated_at: 2024-04-22T10:00:00Z
            name: main_course
            created_at: 2024-04-22T10:00:00Z
            category_ids:
              - 66294b2a4475a41f3e709bbc
              - 66294b2a4475a41f3e709bbd
              - 66294b2a4475a41f3e709bbe
            order_id: 674d0bf5c28b69001f8e03a1
          - updated_at: 2024-04-22T10:00:00Z
            name: main_course
            created_at: 2024-04-22T10:00:00Z
            category_ids:
              - 66294b2a4475a41f3e709bbc
              - 66294b2a4475a41f3e709bbd
              - 66294b2a4475a41f3e709bbe
            order_id: 674d0bf5c28b69001f8e03a1
        total_results: 1
    inline_response_200_6:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
      example:
        results:
          - category_id: 674d0bf5c28b69001f8e03a1
            updated_at: 2024-04-22T10:00:00Z
            dish_ids:
              - 692a4a34a46ecf001f35ac6f
              - 6a4a857c022eb7001f9b8972
              - 6b7c2441a0db43001f9bf377
            name: main_course
            created_at: 2024-04-22T10:00:00Z
          - category_id: 674d0bf5c28b69001f8e03a1
            updated_at: 2024-04-22T10:00:00Z
            dish_ids:
              - 692a4a34a46ecf001f35ac6f
              - 6a4a857c022eb7001f9b8972
              - 6b7c2441a0db43001f9bf377
            name: main_course
            created_at: 2024-04-22T10:00:00Z
    inline_response_200_7:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        total_results:
          type: integer
          example: 1
      example:
        results:
          - category_id: 674d0bf5c28b69001f8e03a1
            updated_at: 2024-04-22T10:00:00Z
            dish_ids:
              - 692a4a34a46ecf001f35ac6f
              - 6a4a857c022eb7001f9b8972
              - 6b7c2441a0db43001f9bf377
            name: main_course
            created_at: 2024-04-22T10:00:00Z
          - category_id: 674d0bf5c28b69001f8e03a1
            updated_at: 2024-04-22T10:00:00Z
            dish_ids:
              - 692a4a34a46ecf001f35ac6f
              - 6a4a857c022eb7001f9b8972
              - 6b7c2441a0db43001f9bf377
            name: main_course
            created_at: 2024-04-22T10:00:00Z
        total_results: 1
    inline_response_200_8:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
      example:
        results:
          - dish_id: 674d0bf5c28b69001f8e03a1
            image_name: burger.jpg
            updated_at: 2024-04-22T10:00:00Z
            price: 9.99
            name: main_course
            station: hot
            created_at: 2024-04-22T10:00:00Z
            description: A description of the resource.
            ingredients:
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
          - dish_id: 674d0bf5c28b69001f8e03a1
            image_name: burger.jpg
            updated_at: 2024-04-22T10:00:00Z
            price: 9.99
            name: main_course
            station: hot
            created_at: 2024-04-22T10:00:00Z
            description: A description of the resource.
            ingredients:
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
              - - ingredient_id: 66294b2a4475a41f3e709bc5
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc6
                  is_essential: true
                - ingredient_id: 66294b2a4475a41f3e709bc7
                  is_essential: false
    inline_response_200_9:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total_results:
          type: integer
          example: 20
      example:
        results:
          - password: P@ssw0rd!
            role: manager
            updated_at: 2024-04-22T10:00:00Z
            user_id: 674d0bf5c28b69001f8e03a1
            user_name: john_doe
            created_at: 2024-04-22T10:00:00Z
            email: johndoe@gmail.com
          - password: P@ssw0rd!
            role: manager
            updated_at: 2024-04-22T10:00:00Z
            user_id: 674d0bf5c28b69001f8e03a1
            user_name: john_doe
            created_at: 2024-04-22T10:00:00Z
            email: johndoe@gmail.com
        total_results: 20
    auth_refreshtoken_body:
      properties:
        refresh_token:
          $ref: '#/components/schemas/RefreshToken'
    Ingredients_inner:
      type: object
      properties:
        ingredient_id:
          type: string
          description: The unique identifier for the resource.
          example: 66294b2a4475a41f3e709bc4
        is_essential:
          type: boolean
          description: |
            Whether the ingredient is essential to prepare the dish.
          example: true
      example:
        - ingredient_id: 66294b2a4475a41f3e709bc5
          is_essential: true
        - ingredient_id: 66294b2a4475a41f3e709bc6
          is_essential: true
        - ingredient_id: 66294b2a4475a41f3e709bc7
          is_essential: false
  requestBodies:
    CreateCategoryRequest:
      description: Request body containing information used to create the resource.
      content:
        application/json:
          schema:
            required:
              - dish_ids
              - name
            type: object
            properties:
              category_id:
                $ref: '#/components/schemas/Id'
              created_at:
                $ref: '#/components/schemas/CreatedAt'
              updated_at:
                $ref: '#/components/schemas/UpdatedAt'
              dish_ids:
                $ref: '#/components/schemas/DishIds'
              name:
                $ref: '#/components/schemas/Name'
      required: true
    UpdateCategoryRequest:
      description: Request body containing information used to update the resource.
      content:
        application/json:
          schema:
            type: object
            properties:
              category_id:
                $ref: '#/components/schemas/Id'
              created_at:
                $ref: '#/components/schemas/CreatedAt'
              updated_at:
                $ref: '#/components/schemas/UpdatedAt'
              dish_ids:
                $ref: '#/components/schemas/DishIds'
              name:
                $ref: '#/components/schemas/Name'
      required: true
    CreateDishRequest:
      description: Request body containing information used to create the resource.
      content:
        application/json:
          schema:
            required:
              - description
              - image_name
              - ingredients
              - name
              - price
              - station
            type: object
            properties:
              description:
                $ref: '#/components/schemas/Description'
              image_name:
                $ref: '#/components/schemas/ImageName'
              ingredients:
                $ref: '#/components/schemas/Ingredients'
              name:
                $ref: '#/components/schemas/Name'
              price:
                $ref: '#/components/schemas/Price'
              station:
                $ref: '#/components/schemas/Station'
      required: true
    UpdateDishRequest:
      description: Request body containing information used to update the resource.
      content:
        application/json:
          schema:
            type: object
            properties:
              description:
                $ref: '#/components/schemas/Description'
              image_name:
                $ref: '#/components/schemas/ImageName'
              ingredients:
                $ref: '#/components/schemas/Ingredients'
              name:
                $ref: '#/components/schemas/Name'
              price:
                $ref: '#/components/schemas/Price'
              station:
                $ref: '#/components/schemas/Station'
      required: true
    CreateIngredientRequest:
      description: Request body containing information used to create the resource.
      content:
        application/json:
          schema:
            required:
              - in_stock_qty
              - name
            type: object
            properties:
              name:
                $ref: '#/components/schemas/Name'
              in_stock_qty:
                $ref: '#/components/schemas/InStockQty'
      required: true
    UpdateIngredientRequest:
      description: Request body containing information used to update the resource.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/Name'
              in_stock_qty:
                $ref: '#/components/schemas/InStockQty'
      required: true
    CreateMenuRequest:
      description: Request body containing information used to create the resource.
      content:
        application/json:
          schema:
            required:
              - category_ids
              - name
            type: object
            properties:
              category_ids:
                $ref: '#/components/schemas/CategoryIds'
              name:
                $ref: '#/components/schemas/Name'
      required: true
    UpdateMenuRequest:
      description: Request body containing information used to update the resource.
      content:
        application/json:
          schema:
            type: object
            properties:
              category_ids:
                $ref: '#/components/schemas/CategoryIds'
              name:
                $ref: '#/components/schemas/Name'
      required: true
    CreateOrderRequest:
      description: Request body containing information used to create the resource.
      content:
        application/json:
          schema:
            required:
              - dish_ids
              - given_name
              - table_number
            type: object
            properties:
              dish_ids:
                $ref: '#/components/schemas/DishIds'
              given_name:
                $ref: '#/components/schemas/GivenName'
              table_number:
                $ref: '#/components/schemas/TableNumber'
              scheduled_at:
                $ref: '#/components/schemas/ScheduledAt'
          examples:
            Order - Unscheduled:
              value:
                dish_ids:
                  - 692a4a34a46ecf001f35ac6f
                  - 6a4a857c022eb7001f9b8972
                  - 6b7c2441a0db43001f9bf377
                given_name: Ben
                table_number: 18
            Order - Scheduled:
              value:
                dish_ids:
                  - 692a4a34a46ecf001f35ac6f
                  - 6a4a857c022eb7001f9b8972
                  - 6b7c2441a0db43001f9bf377
                given_name: Ben
                table_number: 18
                scheduled_at: 2024-08-26T09:03:18.865Z
      required: true
    UpdateOrderRequest:
      description: Request body containing properties to update the resource.
      content:
        application/json:
          schema:
            type: object
            properties:
              dish_ids:
                $ref: '#/components/schemas/DishIds'
              priority:
                $ref: '#/components/schemas/Priority'
              status:
                $ref: '#/components/schemas/Status'
      required: true
    CreateTokenRequest:
      description: Request body containing information used to create the resource.
      content:
        application/json:
          schema:
            required:
              - grant_type
              - password
              - user_name
            properties:
              grant_type:
                type: string
                description:
                  Tells the login endpoint to do perform the resource owner
                  password credential flow.
                example: password
              user_name:
                $ref: '#/components/schemas/UserName'
              password:
                $ref: '#/components/schemas/Password'
      required: true
    CreateUserRequest:
      description: |
        Request body containing information used to update the resource.
      content:
        application/json:
          schema:
            required:
              - email
              - password
              - role
              - user_name
            type: object
            properties:
              email:
                $ref: '#/components/schemas/Email'
              password:
                $ref: '#/components/schemas/Password'
              role:
                $ref: '#/components/schemas/Role'
              user_name:
                $ref: '#/components/schemas/UserName'
      required: true
    UpdateUserRequest:
      description: |
        Request body containing properties to update the resource.
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                $ref: '#/components/schemas/Email'
              password:
                $ref: '#/components/schemas/Password'
              role:
                $ref: '#/components/schemas/Role'
              user_name:
                $ref: '#/components/schemas/UserName'
      required: true
  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
    BasicAuth:
      type: http
      description: |
        Authentication using client credentials. Use the `client_id` as the username and `client_secret` as the password.

        - **client_id**: Public identifier for the client application. Example: `admin_web_app`.
        - **client_secret**: Confidential string for client authentication. Example: `a5d7f23e-8b64-4b4c-9b11-21c5cfdf25f1`.
      scheme: basic
